// Code generated by protoc-gen-go.
// source: munic/type/ack.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TODO : comment each enum case
type Ack_Code int32

const (
	Ack_UNKNOWN        Ack_Code = 0
	Ack_OK             Ack_Code = 1
	Ack_NO_LISTENER    Ack_Code = 2
	Ack_NOT_UNDERSTOOD Ack_Code = 3
)

var Ack_Code_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "NO_LISTENER",
	3: "NOT_UNDERSTOOD",
}
var Ack_Code_value = map[string]int32{
	"UNKNOWN":        0,
	"OK":             1,
	"NO_LISTENER":    2,
	"NOT_UNDERSTOOD": 3,
}

func (x Ack_Code) String() string {
	return proto.EnumName(Ack_Code_name, int32(x))
}
func (Ack_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

// Ack events are sent as a response to a parent message.
type Ack struct {
	// Channel is the name of the communication channel.
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	// Status code
	Status Ack_Code `protobuf:"varint,2,opt,name=status,enum=munic.type.Ack_Code" json:"status,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Ack) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Ack) GetStatus() Ack_Code {
	if m != nil {
		return m.Status
	}
	return Ack_UNKNOWN
}

func init() {
	proto.RegisterType((*Ack)(nil), "munic.type.Ack")
	proto.RegisterEnum("munic.type.Ack_Code", Ack_Code_name, Ack_Code_value)
}

func init() { proto.RegisterFile("munic/type/ack.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xcd, 0x26, 0x9d, 0x66, 0x30, 0x4b, 0xe8, 0xa1, 0xc7, 0xb1, 0xd3, 0x0e, 0x2e, 0x01,
	0xfd, 0x03, 0x76, 0xae, 0x07, 0x99, 0x24, 0xa3, 0xeb, 0x10, 0xbc, 0x8c, 0xf4, 0x6b, 0x58, 0x4b,
	0x93, 0xa6, 0xac, 0x29, 0xe8, 0xaf, 0xf0, 0x2f, 0xf8, 0x53, 0xa5, 0x65, 0xb2, 0xe3, 0xfb, 0xf2,
	0x7d, 0x3c, 0x2f, 0x0f, 0x0e, 0x4c, 0x57, 0x97, 0xc0, 0xdc, 0x77, 0xa3, 0x98, 0x84, 0x8a, 0x36,
	0x67, 0xeb, 0x2c, 0xc1, 0x43, 0x4b, 0xfb, 0x76, 0xf1, 0x83, 0xf0, 0x38, 0x82, 0x8a, 0x84, 0x78,
	0x02, 0x85, 0xac, 0x6b, 0xa5, 0x43, 0x34, 0x47, 0xcb, 0xfb, 0xe4, 0x3f, 0x92, 0x47, 0xec, 0xb5,
	0x4e, 0xba, 0xae, 0x0d, 0x47, 0x73, 0xb4, 0x9c, 0x3d, 0x05, 0xf4, 0xfa, 0x4e, 0x23, 0xa8, 0xe8,
	0xab, 0xcd, 0x55, 0x72, 0xb9, 0x59, 0xbc, 0xe0, 0xdb, 0x3e, 0x93, 0x29, 0x9e, 0x1c, 0xf8, 0x96,
	0x8b, 0x0f, 0xee, 0xdf, 0x10, 0x0f, 0x8f, 0xc4, 0xd6, 0x47, 0xe4, 0x01, 0x4f, 0xb9, 0x38, 0xbe,
	0xbf, 0xed, 0xd3, 0x98, 0xc7, 0x89, 0x3f, 0x22, 0x04, 0xcf, 0xb8, 0x48, 0x8f, 0x07, 0xbe, 0x89,
	0x93, 0x7d, 0x2a, 0xc4, 0xc6, 0x1f, 0xaf, 0x0b, 0x1c, 0x80, 0x35, 0x17, 0x88, 0xb1, 0xb9, 0xd2,
	0x03, 0x6a, 0x7d, 0x17, 0x41, 0xb5, 0xeb, 0xf7, 0xef, 0xd0, 0x67, 0x74, 0x2a, 0x9d, 0x96, 0x19,
	0x35, 0x36, 0x2b, 0xb5, 0x5a, 0x95, 0xb5, 0x3b, 0x4b, 0x0a, 0xd6, 0x30, 0xd0, 0xb6, 0xcb, 0x57,
	0xb5, 0xfa, 0x72, 0xac, 0x85, 0x42, 0x19, 0xc9, 0xc0, 0x9a, 0xa6, 0xd4, 0x2a, 0x67, 0x27, 0xcb,
	0xae, 0x36, 0xda, 0x5f, 0x84, 0x32, 0x6f, 0xd0, 0xf1, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x93, 0xc5, 0x89, 0x26, 0x01, 0x00, 0x00,
}

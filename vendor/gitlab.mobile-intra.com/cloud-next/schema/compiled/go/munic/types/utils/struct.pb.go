// Code generated by protoc-gen-go.
// source: munic/type/utils/struct.proto
// DO NOT EDIT!

package utils

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_type "google.golang.org/genproto/googleapis/type/latlng"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Struct struct {
	// Unordered map of dynamically typed values.
	StructFields map[string]*Value `protobuf:"bytes,1,rep,name=struct_fields,json=structFields" json:"struct_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Struct) Reset()                    { *m = Struct{} }
func (m *Struct) String() string            { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()               {}
func (*Struct) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Struct) GetStructFields() map[string]*Value {
	if m != nil {
		return m.StructFields
	}
	return nil
}

type Value struct {
	// The kind of value.
	//
	// Types that are valid to be assigned to Kind:
	//	*Value_IntegerValue
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_ListValue
	//	*Value_LatlngValue
	//	*Value_BytesValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isValue_Kind interface {
	isValue_Kind()
}

type Value_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,1,opt,name=integer_value,json=integerValue,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}
type Value_StructValue struct {
	StructValue *Struct `protobuf:"bytes,5,opt,name=struct_value,json=structValue,oneof"`
}
type Value_ListValue struct {
	ListValue *ListValue `protobuf:"bytes,6,opt,name=list_value,json=listValue,oneof"`
}
type Value_LatlngValue struct {
	LatlngValue *google_type.LatLng `protobuf:"bytes,7,opt,name=latlng_value,json=latlngValue,oneof"`
}
type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,8,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*Value_IntegerValue) isValue_Kind() {}
func (*Value_DoubleValue) isValue_Kind()  {}
func (*Value_StringValue) isValue_Kind()  {}
func (*Value_BoolValue) isValue_Kind()    {}
func (*Value_StructValue) isValue_Kind()  {}
func (*Value_ListValue) isValue_Kind()    {}
func (*Value_LatlngValue) isValue_Kind()  {}
func (*Value_BytesValue) isValue_Kind()   {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetIntegerValue() int64 {
	if x, ok := m.GetKind().(*Value_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetKind().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetStructValue() *Struct {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if x, ok := m.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (m *Value) GetLatlngValue() *google_type.LatLng {
	if x, ok := m.GetKind().(*Value_LatlngValue); ok {
		return x.LatlngValue
	}
	return nil
}

func (m *Value) GetBytesValue() []byte {
	if x, ok := m.GetKind().(*Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_IntegerValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_ListValue)(nil),
		(*Value_LatlngValue)(nil),
		(*Value_BytesValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntegerValue:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntegerValue))
	case *Value_DoubleValue:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_StructValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *Value_ListValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListValue); err != nil {
			return err
		}
	case *Value_LatlngValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LatlngValue); err != nil {
			return err
		}
	case *Value_BytesValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case nil:
	default:
		return fmt.Errorf("Value.Kind has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // kind.integer_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_IntegerValue{int64(x)}
		return true, err
	case 2: // kind.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 3: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Value_StringValue{x}
		return true, err
	case 4: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_BoolValue{x != 0}
		return true, err
	case 5: // kind.struct_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Struct)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_StructValue{msg}
		return true, err
	case 6: // kind.list_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_ListValue{msg}
		return true, err
	case 7: // kind.latlng_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_type.LatLng)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_LatlngValue{msg}
		return true, err
	case 8: // kind.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Kind = &Value_BytesValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntegerValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntegerValue))
	case *Value_DoubleValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Value_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ListValue:
		s := proto.Size(x.ListValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_LatlngValue:
		s := proto.Size(x.LatlngValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_BytesValue:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListValue struct {
	// Repeated field of dynamically typed values.
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListValue) Reset()                    { *m = ListValue{} }
func (m *ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()               {}
func (*ListValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Struct)(nil), "munic.type.utils.Struct")
	proto.RegisterType((*Value)(nil), "munic.type.utils.Value")
	proto.RegisterType((*ListValue)(nil), "munic.type.utils.ListValue")
}

func init() { proto.RegisterFile("munic/type/utils/struct.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xdb, 0x6d, 0xdc, 0x9e, 0x64, 0x61, 0x8d, 0x17, 0x86, 0x8a, 0x18, 0x2b, 0x42,
	0x10, 0x9a, 0x81, 0xf5, 0x66, 0x91, 0xf5, 0xa6, 0xa0, 0xf6, 0xa2, 0xe0, 0x12, 0x41, 0xc4, 0x9b,
	0x92, 0x8f, 0x31, 0x0e, 0x3b, 0x99, 0x29, 0x99, 0x89, 0xda, 0xb7, 0xf1, 0x1d, 0x7c, 0x3c, 0x6f,
	0x64, 0xe6, 0x4c, 0x77, 0x17, 0xcb, 0x5e, 0xb5, 0xf9, 0x9f, 0xdf, 0xef, 0x9c, 0x64, 0x3e, 0xe0,
	0x69, 0x37, 0x48, 0x5e, 0x53, 0xb3, 0xdb, 0x32, 0x3a, 0x18, 0x2e, 0x34, 0xd5, 0xa6, 0x1f, 0x6a,
	0x93, 0x6f, 0x7b, 0x65, 0x54, 0x7c, 0xe6, 0xca, 0xb9, 0x2d, 0xe7, 0xae, 0x3c, 0x4b, 0x5a, 0xa5,
	0x5a, 0xc1, 0xd0, 0x10, 0xa5, 0x11, 0xb2, 0x45, 0x76, 0xfe, 0x87, 0x40, 0xf0, 0xc9, 0xc9, 0xf1,
	0x47, 0x38, 0xc5, 0x36, 0x9b, 0x6f, 0x9c, 0x89, 0x46, 0x27, 0x24, 0x1d, 0x67, 0xe1, 0xf9, 0xab,
	0xfc, 0xff, 0x76, 0x39, 0x0a, 0xfe, 0xe7, 0xbd, 0x83, 0xdf, 0x49, 0xd3, 0xef, 0x8a, 0x48, 0xdf,
	0x89, 0x66, 0x5f, 0xe0, 0xe1, 0x01, 0x12, 0x9f, 0xc1, 0xf8, 0x9a, 0xed, 0x12, 0x92, 0x92, 0x6c,
	0x5a, 0xd8, 0xbf, 0xf1, 0x02, 0x26, 0x3f, 0x4a, 0x31, 0xb0, 0xe4, 0x28, 0x25, 0x59, 0x78, 0xfe,
	0xf8, 0x70, 0xde, 0x67, 0x5b, 0x2e, 0x90, 0x7a, 0x73, 0x74, 0x41, 0xe6, 0x7f, 0x8f, 0x60, 0xe2,
	0xc2, 0xf8, 0x25, 0x9c, 0x72, 0x69, 0x58, 0xcb, 0xfa, 0x0d, 0x36, 0xb1, 0x8d, 0xc7, 0xab, 0x51,
	0x11, 0xf9, 0x18, 0xb1, 0x17, 0x10, 0x35, 0x6a, 0xa8, 0x04, 0xdb, 0xdc, 0x8e, 0x22, 0xab, 0x51,
	0x11, 0x62, 0x7a, 0x03, 0x69, 0xd3, 0x73, 0xd9, 0x7a, 0x68, 0x6c, 0xdf, 0xd1, 0x42, 0x98, 0x22,
	0xf4, 0x0c, 0xa0, 0x52, 0x4a, 0x78, 0xe4, 0x38, 0x25, 0xd9, 0xc9, 0x6a, 0x54, 0x4c, 0x6d, 0x86,
	0xc0, 0x5b, 0xf0, 0xab, 0xe0, 0x91, 0x89, 0xfb, 0xaa, 0xe4, 0xbe, 0x55, 0xf4, 0xfd, 0x87, 0xda,
	0xa0, 0x7e, 0x09, 0x20, 0xb8, 0xde, 0xcb, 0x81, 0x93, 0x9f, 0x1c, 0xca, 0x6b, 0xae, 0x51, 0xb0,
	0xc3, 0xc5, 0xfe, 0x21, 0xbe, 0x80, 0x08, 0xb7, 0xd7, 0xfb, 0x0f, 0x9c, 0xff, 0x28, 0xc7, 0xfd,
	0xc7, 0x06, 0xeb, 0xd2, 0xac, 0x65, 0x6b, 0xe7, 0x22, 0x8a, 0xe6, 0x73, 0x08, 0xab, 0x9d, 0x61,
	0xda, 0x8b, 0x27, 0x29, 0xc9, 0xa2, 0xd5, 0xa8, 0x00, 0x17, 0x3a, 0x64, 0x19, 0xc0, 0xf1, 0x35,
	0x97, 0xcd, 0xfc, 0x12, 0xa6, 0x37, 0xe3, 0x63, 0x0a, 0x81, 0x33, 0xf6, 0xc7, 0xe5, 0xde, 0xed,
	0xf3, 0xd8, 0xf2, 0x27, 0xcc, 0x6a, 0xd5, 0x79, 0xaa, 0x53, 0x0d, 0x13, 0x77, 0xd8, 0x65, 0x88,
	0xab, 0x72, 0x65, 0x0f, 0xe7, 0x15, 0xf9, 0xfa, 0xa1, 0xe5, 0x46, 0x94, 0x55, 0xde, 0xa9, 0x8a,
	0x0b, 0xb6, 0xe0, 0xd2, 0xf4, 0x65, 0x5e, 0xab, 0x8e, 0xd6, 0x42, 0x0d, 0xcd, 0x42, 0xb2, 0x5f,
	0x86, 0xea, 0xfa, 0x3b, 0xeb, 0x4a, 0x5a, 0xab, 0x6e, 0xcb, 0x05, 0x6b, 0x68, 0xab, 0xe8, 0xed,
	0xfd, 0xd0, 0x78, 0x41, 0x7e, 0x13, 0x52, 0x05, 0xee, 0xc4, 0xbf, 0xfe, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xb3, 0x7c, 0xef, 0x22, 0x3e, 0x03, 0x00, 0x00,
}

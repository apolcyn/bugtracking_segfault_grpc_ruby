// Code generated by protoc-gen-go.
// source: munic/type/track.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import munic_type_utils "gitlab.mobile-intra.com/cloud-next/schema/compiled/go/munic/types/utils"
import munic_type_knownFields "gitlab.mobile-intra.com/cloud-next/schema/compiled/go/munic/types/knownFields"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Track data sent by a device or injected by cloud (enrichement)
type Track struct {
	// The namespaced track fields
	Namespaces map[string]*Namespace `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The number of the recived field of the concerned asset starting
	// from the last connection.
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *Track) Reset()                    { *m = Track{} }
func (m *Track) String() string            { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()               {}
func (*Track) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Track) GetNamespaces() map[string]*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *Track) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// Track.namespaces["MUNIC"].base.POSITION
// Track.namespaces["UNTYPED_<PREFIX>"].struct["POSITION"].integer_value
// Track.namespaces["AGENT_<AGENTNAME>"].struct["POSITION"].integer_value
type Namespace struct {
	// Types that are valid to be assigned to Kind:
	//	*Namespace_Base
	//	*Namespace_Struct
	Kind isNamespace_Kind `protobuf_oneof:"kind"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isNamespace_Kind interface {
	isNamespace_Kind()
}

type Namespace_Base struct {
	Base *munic_type_knownFields.MunicFields `protobuf:"bytes,1,opt,name=base,oneof"`
}
type Namespace_Struct struct {
	Struct *munic_type_utils.Struct `protobuf:"bytes,2,opt,name=struct,oneof"`
}

func (*Namespace_Base) isNamespace_Kind()   {}
func (*Namespace_Struct) isNamespace_Kind() {}

func (m *Namespace) GetKind() isNamespace_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Namespace) GetBase() *munic_type_knownFields.MunicFields {
	if x, ok := m.GetKind().(*Namespace_Base); ok {
		return x.Base
	}
	return nil
}

func (m *Namespace) GetStruct() *munic_type_utils.Struct {
	if x, ok := m.GetKind().(*Namespace_Struct); ok {
		return x.Struct
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Namespace) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Namespace_OneofMarshaler, _Namespace_OneofUnmarshaler, _Namespace_OneofSizer, []interface{}{
		(*Namespace_Base)(nil),
		(*Namespace_Struct)(nil),
	}
}

func _Namespace_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Namespace)
	// kind
	switch x := m.Kind.(type) {
	case *Namespace_Base:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Base); err != nil {
			return err
		}
	case *Namespace_Struct:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Struct); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Namespace.Kind has unexpected type %T", x)
	}
	return nil
}

func _Namespace_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Namespace)
	switch tag {
	case 1: // kind.base
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(munic_type_knownFields.MunicFields)
		err := b.DecodeMessage(msg)
		m.Kind = &Namespace_Base{msg}
		return true, err
	case 2: // kind.struct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(munic_type_utils.Struct)
		err := b.DecodeMessage(msg)
		m.Kind = &Namespace_Struct{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Namespace_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Namespace)
	// kind
	switch x := m.Kind.(type) {
	case *Namespace_Base:
		s := proto.Size(x.Base)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Namespace_Struct:
		s := proto.Size(x.Struct)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Track)(nil), "munic.type.Track")
	proto.RegisterType((*Namespace)(nil), "munic.type.Namespace")
}

func init() { proto.RegisterFile("munic/type/track.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x6a, 0xe3, 0x30,
	0x10, 0xc6, 0xa3, 0xfc, 0x83, 0x4c, 0x0e, 0xbb, 0x98, 0xec, 0x62, 0x02, 0x0b, 0xd9, 0xf4, 0x62,
	0x28, 0x91, 0xc0, 0xbd, 0xb4, 0xbd, 0x25, 0xd0, 0x92, 0x4b, 0x4b, 0x70, 0x73, 0xea, 0x4d, 0x96,
	0x45, 0xaa, 0x5a, 0x7f, 0x8c, 0x25, 0xb7, 0xc9, 0xb5, 0x4f, 0xd2, 0xa7, 0xe8, 0xf3, 0x15, 0xcb,
	0x21, 0x31, 0xbd, 0x8d, 0x66, 0xbe, 0x9f, 0x3e, 0xe6, 0x1b, 0xf8, 0xab, 0x2a, 0x2d, 0x18, 0x71,
	0x87, 0x82, 0x13, 0x57, 0x52, 0x96, 0xe3, 0xa2, 0x34, 0xce, 0x04, 0xe0, 0xfb, 0xb8, 0xee, 0x4f,
	0xff, 0xb5, 0x34, 0x95, 0x13, 0xd2, 0x12, 0xeb, 0xca, 0x8a, 0xb9, 0x46, 0x3a, 0x8d, 0x5a, 0xe3,
	0x5c, 0x9b, 0x77, 0x7d, 0x2f, 0xb8, 0xcc, 0x2c, 0xf1, 0xed, 0xa6, 0x6e, 0x94, 0xf3, 0x2f, 0x04,
	0x83, 0x6d, 0x6d, 0x12, 0x2c, 0x01, 0x34, 0x55, 0xdc, 0x16, 0x94, 0x71, 0x1b, 0xa2, 0x59, 0x2f,
	0x1a, 0xc7, 0xff, 0xf1, 0xd9, 0x13, 0x7b, 0x19, 0x7e, 0x3c, 0x69, 0xee, 0xb4, 0x2b, 0x0f, 0x49,
	0x0b, 0x0a, 0x26, 0x30, 0x10, 0x3a, 0xe3, 0xfb, 0xb0, 0x3b, 0x43, 0x51, 0x3f, 0x69, 0x1e, 0xd3,
	0x2d, 0xfc, 0xfa, 0x01, 0x05, 0xbf, 0xa1, 0x97, 0xf3, 0x43, 0x88, 0x66, 0x28, 0x1a, 0x25, 0x75,
	0x19, 0x5c, 0xc2, 0xe0, 0x8d, 0xca, 0x8a, 0x7b, 0x74, 0x1c, 0xff, 0x69, 0x1b, 0x9f, 0xe8, 0xa4,
	0xd1, 0xdc, 0x76, 0xaf, 0xd1, 0xfc, 0x03, 0xc1, 0xe8, 0x34, 0x08, 0x6e, 0xa0, 0x9f, 0x52, 0xcb,
	0xfd, 0x8f, 0xe3, 0xf8, 0xa2, 0x4d, 0xb7, 0xf6, 0xc7, 0x0f, 0xe7, 0xfd, 0xd7, 0x9d, 0xc4, 0x23,
	0x41, 0x0c, 0xc3, 0x26, 0xbb, 0xa3, 0x75, 0xd8, 0x86, 0x7d, 0xb6, 0xf8, 0xc9, 0xcf, 0xd7, 0x9d,
	0xe4, 0xa8, 0x5c, 0x0d, 0xa1, 0x9f, 0x0b, 0x9d, 0xad, 0x5e, 0x61, 0xc2, 0x8c, 0x3a, 0x02, 0xca,
	0x64, 0x5c, 0x7a, 0x6c, 0x05, 0x3e, 0xab, 0x4d, 0x9d, 0xf0, 0x06, 0x3d, 0x2f, 0x77, 0xc2, 0x49,
	0x9a, 0x62, 0x65, 0x52, 0x21, 0xf9, 0x42, 0x68, 0x57, 0x52, 0xcc, 0x8c, 0x22, 0x4c, 0x9a, 0x2a,
	0x5b, 0x68, 0xbe, 0x77, 0xc4, 0xb2, 0x17, 0xae, 0x28, 0x61, 0x46, 0x15, 0x42, 0xf2, 0x8c, 0xec,
	0x0c, 0x39, 0xdf, 0xd0, 0x7e, 0x22, 0x94, 0x0e, 0xfd, 0xc1, 0xae, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xc0, 0xa3, 0x62, 0xd3, 0x1f, 0x02, 0x00, 0x00,
}

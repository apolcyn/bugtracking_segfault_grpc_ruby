// Code generated by protoc-gen-go.
// source: munic/type/knownFields/municFields.proto
// DO NOT EDIT!

/*
Package knownFields is a generated protocol buffer package.

It is generated from these files:
	munic/type/knownFields/municFields.proto

It has these top-level messages:
	MunicFields
*/
package knownFields

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import munic_type_utils "gitlab.mobile-intra.com/cloud-next/schema/compiled/go/munic/types/utils"
import google_type "google.golang.org/genproto/googleapis/type/latlng"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MunicFields struct {
	// Stores the position of the asset.
	POSITION *google_type.LatLng `protobuf:"bytes,1,opt,name=POSITION" json:"POSITION,omitempty"`
	// Stores the last validity state of the latest GPS GPRMC frame. 'A' is valid and
	// 'V' is invalid.
	GPRMC_VALID *munic_type_utils.String `protobuf:"bytes,3,opt,name=GPRMC_VALID,json=GPRMCVALID" json:"GPRMC_VALID,omitempty"`
	// Stores the last valid speed of the GPS in 1/1000th knots.
	GPS_SPEED *munic_type_utils.Integer `protobuf:"bytes,8,opt,name=GPS_SPEED,json=GPSSPEED" json:"GPS_SPEED,omitempty"`
	// Stores the last valid course of the GPS in 1/100th degrees.
	GPS_DIR *munic_type_utils.Integer `protobuf:"bytes,9,opt,name=GPS_DIR,json=GPSDIR" json:"GPS_DIR,omitempty"`
	// Stores the current altitude, in meters. Is set to -999 when GPS is not fixed.
	GPS_ALTITUDE *munic_type_utils.Integer `protobuf:"bytes,10,opt,name=GPS_ALTITUDE,json=GPSALTITUDE" json:"GPS_ALTITUDE,omitempty"`
	// Stores the state of the ignition input.
	DIO_IGNITION *munic_type_utils.Boolean `protobuf:"bytes,14,opt,name=DIO_IGNITION,json=DIOIGNITION" json:"DIO_IGNITION,omitempty"`
	// Stores 0 if the internal battery is in use or 1 if not.
	BATT *munic_type_utils.Integer `protobuf:"bytes,15,opt,name=BATT" json:"BATT,omitempty"`
	// Stores 0 (2 with roaming) if GPRS is not registered or 1 (3 with roaming) if
	// registered. This value is used in the GPRS state tracking field.
	GPRS_HEADER *munic_type_utils.Integer `protobuf:"bytes,16,opt,name=GPRS_HEADER,json=GPRSHEADER" json:"GPRS_HEADER,omitempty"`
	// Stores the modem RSSI.
	RSSI *munic_type_utils.Integer `protobuf:"bytes,17,opt,name=RSSI" json:"RSSI,omitempty"`
	// Set to 0 if the device is 'really' unplugged from the car. Set to 1 if the
	// external voltage is present. This may differ under some circumstances from
	// MDI_BATT (the device may be connected AND the battery used).
	MDI_EXT_BATT_PRESENT *munic_type_utils.Integer `protobuf:"bytes,18,opt,name=MDI_EXT_BATT_PRESENT,json=MDIEXTBATTPRESENT" json:"MDI_EXT_BATT_PRESENT,omitempty"`
	// Standard tachometer return value. The first driver's selector state from the
	// tachograph device (driving, rest, availability, work).
	TACHOGRAPH_FIRST_DRIVER_STATE *munic_type_utils.String `protobuf:"bytes,19,opt,name=TACHOGRAPH_FIRST_DRIVER_STATE,json=TACHOGRAPHFIRSTDRIVERSTATE" json:"TACHOGRAPH_FIRST_DRIVER_STATE,omitempty"`
	// Standard tachometer return value.
	TACHOGRAPH_FIRST_DRIVER_DRIVING_STATE *munic_type_utils.String `protobuf:"bytes,20,opt,name=TACHOGRAPH_FIRST_DRIVER_DRIVING_STATE,json=TACHOGRAPHFIRSTDRIVERDRIVINGSTATE" json:"TACHOGRAPH_FIRST_DRIVER_DRIVING_STATE,omitempty"`
	// Standard tachometer return value. The dailymeter value from the tachograph
	// device.
	TACHOGRAPH_DAILYMETER *munic_type_utils.Integer `protobuf:"bytes,21,opt,name=TACHOGRAPH_DAILYMETER,json=TACHOGRAPHDAILYMETER" json:"TACHOGRAPH_DAILYMETER,omitempty"`
	// Standard tachometer return value. The odometer value from the tachograph device.
	TACHOGRAPH_ODOMETER *munic_type_utils.Integer `protobuf:"bytes,22,opt,name=TACHOGRAPH_ODOMETER,json=TACHOGRAPHODOMETER" json:"TACHOGRAPH_ODOMETER,omitempty"`
	// Stores value in kilometers of the GPS's partial odometer.
	ODO_PARTIAL_KM *munic_type_utils.String `protobuf:"bytes,23,opt,name=ODO_PARTIAL_KM,json=ODOPARTIALKM" json:"ODO_PARTIAL_KM,omitempty"`
	// Stores value in meters of the GPS's full odometer.
	ODO_FULL *munic_type_utils.Integer `protobuf:"bytes,24,opt,name=ODO_FULL,json=ODOFULL" json:"ODO_FULL,omitempty"`
	// Standard tachometer return value. The time spent driving value from the
	// tachograph device.
	TACHOGRAPH_DRIVING_TIME *munic_type_utils.Integer `protobuf:"bytes,25,opt,name=TACHOGRAPH_DRIVING_TIME,json=TACHOGRAPHDRIVINGTIME" json:"TACHOGRAPH_DRIVING_TIME,omitempty"`
	// Stores the state of the alarm input.
	DIO_ALARM *munic_type_utils.Boolean `protobuf:"bytes,26,opt,name=DIO_ALARM,json=DIOALARM" json:"DIO_ALARM,omitempty"`
	// Stores the first IButton ID.
	DRIVER_ID *munic_type_utils.String `protobuf:"bytes,27,opt,name=DRIVER_ID,json=DRIVERID" json:"DRIVER_ID,omitempty"`
	// 1-wire temperature sensor #1.
	TEMP_1 *munic_type_utils.Integer `protobuf:"bytes,28,opt,name=TEMP_1,json=TEMP1" json:"TEMP_1,omitempty"`
	// 1-wire temperature sensor #2.
	TEMP_2 *munic_type_utils.Integer `protobuf:"bytes,29,opt,name=TEMP_2,json=TEMP2" json:"TEMP_2,omitempty"`
	// 1-wire temperature sensor #3.
	TEMP_3 *munic_type_utils.Integer `protobuf:"bytes,30,opt,name=TEMP_3,json=TEMP3" json:"TEMP_3,omitempty"`
	// 1-wire temperature sensor #4.
	TEMP_4 *munic_type_utils.Integer `protobuf:"bytes,31,opt,name=TEMP_4,json=TEMP4" json:"TEMP_4,omitempty"`
	// 1-wire temperature sensor #5.
	TEMP_5 *munic_type_utils.Integer `protobuf:"bytes,32,opt,name=TEMP_5,json=TEMP5" json:"TEMP_5,omitempty"`
	// 1-wire temperature sensor #6.
	TEMP_6 *munic_type_utils.Integer `protobuf:"bytes,33,opt,name=TEMP_6,json=TEMP6" json:"TEMP_6,omitempty"`
	// 1-wire temperature sensor #7.
	TEMP_7 *munic_type_utils.Integer `protobuf:"bytes,34,opt,name=TEMP_7,json=TEMP7" json:"TEMP_7,omitempty"`
	// 1-wire temperature sensor #8.
	TEMP_8 *munic_type_utils.Integer `protobuf:"bytes,35,opt,name=TEMP_8,json=TEMP8" json:"TEMP_8,omitempty"`
	// 1-wire temperature sensor #9.
	TEMP_9 *munic_type_utils.Integer `protobuf:"bytes,36,opt,name=TEMP_9,json=TEMP9" json:"TEMP_9,omitempty"`
	// 1-wire temperature sensor #10.
	TEMP_10 *munic_type_utils.Integer `protobuf:"bytes,37,opt,name=TEMP_10,json=TEMP10" json:"TEMP_10,omitempty"`
	// Stores the state of all inputs in a hexstring, each bit represents one input.
	DIO_IN_TOR *munic_type_utils.Bytes `protobuf:"bytes,38,opt,name=DIO_IN_TOR,json=DIOINTOR" json:"DIO_IN_TOR,omitempty"`
	// Horizontal dilution of the precision of the GPS.
	GPS_HDOP *munic_type_utils.Integer `protobuf:"bytes,39,opt,name=GPS_HDOP,json=GPSHDOP" json:"GPS_HDOP,omitempty"`
	// Vertical dilution of the precision of the GPS.
	GPS_VDOP *munic_type_utils.Integer `protobuf:"bytes,40,opt,name=GPS_VDOP,json=GPSVDOP" json:"GPS_VDOP,omitempty"`
	// Positional dilution of the precision of the GPS.
	GPS_PDOP *munic_type_utils.Integer `protobuf:"bytes,41,opt,name=GPS_PDOP,json=GPSPDOP" json:"GPS_PDOP,omitempty"`
	// Battery temperature (milli °C).
	BATT_TEMP *munic_type_utils.Integer `protobuf:"bytes,42,opt,name=BATT_TEMP,json=BATTTEMP" json:"BATT_TEMP,omitempty"`
	// Case temperature (milli °C).
	CASE_TEMP *munic_type_utils.Integer `protobuf:"bytes,43,opt,name=CASE_TEMP,json=CASETEMP" json:"CASE_TEMP,omitempty"`
	// Name of the current network operator.
	MODEM_NETWORK_OPERATOR *munic_type_utils.String `protobuf:"bytes,44,opt,name=MODEM_NETWORK_OPERATOR,json=MODEMNETWORKOPERATOR" json:"MODEM_NETWORK_OPERATOR,omitempty"`
	// Contains the unique identifier for the first OBD protocol the device used to
	// connect itself with.
	OBD_CONNECTED_PROTOCOL *munic_type_utils.Integer `protobuf:"bytes,45,opt,name=OBD_CONNECTED_PROTOCOL,json=OBDCONNECTEDPROTOCOL" json:"OBD_CONNECTED_PROTOCOL,omitempty"`
	// Contains the current PDOP status: 0 if instable, 1 if the pdop is less than the
	// configured value for the configured number of seconds, 2 if the pdop is more
	// than the configured value for the configured number of seconds.
	GPS_AVERAGE_PDOP_STATUS *munic_type_utils.Integer `protobuf:"bytes,46,opt,name=GPS_AVERAGE_PDOP_STATUS,json=GPSAVERAGEPDOPSTATUS" json:"GPS_AVERAGE_PDOP_STATUS,omitempty"`
	// The last valid gps latitude known. Needs to be divided by 10^6 to be in decimal
	// degree format.
	MDI_LAST_VALID_GPS_LATITUDE *munic_type_utils.Integer `protobuf:"bytes,47,opt,name=MDI_LAST_VALID_GPS_LATITUDE,json=MDILASTVALIDGPSLATITUDE" json:"MDI_LAST_VALID_GPS_LATITUDE,omitempty"`
	// The last valid gps longitude known. Needs to be divided by 10^6 to be in decimal
	// degree format.
	MDI_LAST_VALID_GPS_LONGITUDE *munic_type_utils.Integer `protobuf:"bytes,48,opt,name=MDI_LAST_VALID_GPS_LONGITUDE,json=MDILASTVALIDGPSLONGITUDE" json:"MDI_LAST_VALID_GPS_LONGITUDE,omitempty"`
	// Fuel level of the second tank.
	FMS_FUEL_LEVEL_2 *munic_type_utils.Integer `protobuf:"bytes,50,opt,name=FMS_FUEL_LEVEL_2,json=FMSFUELLEVEL2" json:"FMS_FUEL_LEVEL_2,omitempty"`
	// TODO: comment this field
	MDI_OBD_FUEL_LEVEL_RATIO *munic_type_utils.Integer `protobuf:"bytes,51,opt,name=MDI_OBD_FUEL_LEVEL_RATIO,json=MDIOBDFUELLEVELRATIO" json:"MDI_OBD_FUEL_LEVEL_RATIO,omitempty"`
	// Standard tachometer return value. The first driver's id from the tachograph
	// device.
	TACHOGRAPH_FIRST_DRIVER_ID *munic_type_utils.String `protobuf:"bytes,52,opt,name=TACHOGRAPH_FIRST_DRIVER_ID,json=TACHOGRAPHFIRSTDRIVERID" json:"TACHOGRAPH_FIRST_DRIVER_ID,omitempty"`
	// Stores the list of crossed areas. Format is (FileId:AreaId;)*.
	AREA_LIST *munic_type_utils.String `protobuf:"bytes,53,opt,name=AREA_LIST,json=AREALIST" json:"AREA_LIST,omitempty"`
	// Standard tachometer return value. Update timestamp every time another value is
	// updated in number of seconds since Jan 1st 1970 (EPOCH for UNIX).
	TACHOGRAPH_TIMESTAMP *munic_type_utils.Integer `protobuf:"bytes,54,opt,name=TACHOGRAPH_TIMESTAMP,json=TACHOGRAPHTIMESTAMP" json:"TACHOGRAPH_TIMESTAMP,omitempty"`
	// Number of satellites used for the GPS fix.
	GPS_FIXED_SAT_NUM *munic_type_utils.Integer `protobuf:"bytes,55,opt,name=GPS_FIXED_SAT_NUM,json=GPSFIXEDSATNUM" json:"GPS_FIXED_SAT_NUM,omitempty"`
	// Filled by the gpsMvtDetector component. Retrurns true when the device is moving
	// according to the GPS or the accelerometer.
	MVT_STATE *munic_type_utils.Boolean `protobuf:"bytes,56,opt,name=MVT_STATE,json=MVTSTATE" json:"MVT_STATE,omitempty"`
	// Stores the last boot reason.
	BOOT_REASON *munic_type_utils.String `protobuf:"bytes,57,opt,name=BOOT_REASON,json=BOOTREASON" json:"BOOT_REASON,omitempty"`
	// Stores both the value of the shutdown field_type and the value of the shutdown
	// reason when the function shutdownRequest is called. Values are separated by a
	// '-'.
	SHUTDOWN_TYPE_AND_REASON *munic_type_utils.String `protobuf:"bytes,58,opt,name=SHUTDOWN_TYPE_AND_REASON,json=SHUTDOWNTYPEANDREASON" json:"SHUTDOWN_TYPE_AND_REASON,omitempty"`
	// Internal battery voltage (mV).
	BATT_VOLT *munic_type_utils.Integer `protobuf:"bytes,59,opt,name=BATT_VOLT,json=BATTVOLT" json:"BATT_VOLT,omitempty"`
	// Stores the total current number of kilobytes of data transmitted.
	TX_KBYTES *munic_type_utils.Integer `protobuf:"bytes,60,opt,name=TX_KBYTES,json=TXKBYTES" json:"TX_KBYTES,omitempty"`
	// Stores the total current number of kilobytes of data received.
	RX_KBYTES *munic_type_utils.Integer `protobuf:"bytes,61,opt,name=RX_KBYTES,json=RXKBYTES" json:"RX_KBYTES,omitempty"`
	// Used when a resistor is wired to an output in order to keep the battery
	// temperature above 0°C while it is charging.
	BATT_WARMUP *munic_type_utils.Integer `protobuf:"bytes,62,opt,name=BATT_WARMUP,json=BATTWARMUP" json:"BATT_WARMUP,omitempty"`
	// Stores 1 if the internal battery is charging or 0 if not.
	BATT_CHARGING *munic_type_utils.Boolean `protobuf:"bytes,63,opt,name=BATT_CHARGING,json=BATTCHARGING" json:"BATT_CHARGING,omitempty"`
	// Standard 2 card slot tachometer return value (some trucks have tachometers that
	// allow you to insert two cards; both drivers have their own state). The second
	// driver's selector state from the tachograph device.
	TACHOGRAPH_SECOND_DRIVER_STATE *munic_type_utils.String `protobuf:"bytes,64,opt,name=TACHOGRAPH_SECOND_DRIVER_STATE,json=TACHOGRAPHSECONDDRIVERSTATE" json:"TACHOGRAPH_SECOND_DRIVER_STATE,omitempty"`
	// Standard 2 card slot tachometer return value. The second driver's id from the
	// tachograph device.
	TACHOGRAPH_SECOND_DRIVER_ID *munic_type_utils.String `protobuf:"bytes,65,opt,name=TACHOGRAPH_SECOND_DRIVER_ID,json=TACHOGRAPHSECONDDRIVERID" json:"TACHOGRAPH_SECOND_DRIVER_ID,omitempty"`
	// Standard tachometer return value. The vehicle registration number (VRN) from the
	// tachograph device.
	TACHOGRAPH_VRN *munic_type_utils.String `protobuf:"bytes,66,opt,name=TACHOGRAPH_VRN,json=TACHOGRAPHVRN" json:"TACHOGRAPH_VRN,omitempty"`
	// Standard tachometer return value. The vehicle identification number (VIN) from
	// the tachograph device.
	TACHOGRAPH_VIN *munic_type_utils.Bytes `protobuf:"bytes,67,opt,name=TACHOGRAPH_VIN,json=TACHOGRAPHVIN" json:"TACHOGRAPH_VIN,omitempty"`
	// Stores the state of all outputs in a hexstring, each bit represents one output.
	DIO_OUT_TOR *munic_type_utils.Bytes `protobuf:"bytes,68,opt,name=DIO_OUT_TOR,json=DIOOUTTOR" json:"DIO_OUT_TOR,omitempty"`
	// Old framework component that manages IO for relays with IButton keys.
	// Error-prone, so it is recommended not to use it.
	RELAYCONTROL_STATE *munic_type_utils.Boolean `protobuf:"bytes,69,opt,name=RELAYCONTROL_STATE,json=RELAYCONTROLSTATE" json:"RELAYCONTROL_STATE,omitempty"`
	// ICCID number of the SIM card (if present).
	MODEM_SIM_ICCID *munic_type_utils.String `protobuf:"bytes,70,opt,name=MODEM_SIM_ICCID,json=MODEMSIMICCID" json:"MODEM_SIM_ICCID,omitempty"`
	// IMSI number of the SIM card (if present).
	MODEM_SIM_IMSI *munic_type_utils.String `protobuf:"bytes,71,opt,name=MODEM_SIM_IMSI,json=MODEMSIMIMSI" json:"MODEM_SIM_IMSI,omitempty"`
	// State of the serial PPP instances (0=not connected, 1=waiting for connection,
	// 2=connected).
	SERIAL_PPP_STATE *munic_type_utils.Integer `protobuf:"bytes,72,opt,name=SERIAL_PPP_STATE,json=SERIALPPPSTATE" json:"SERIAL_PPP_STATE,omitempty"`
	// Fuel level in 1/10th of Liters.
	MDI_OBD_FUEL_LEVEL *munic_type_utils.Integer `protobuf:"bytes,73,opt,name=MDI_OBD_FUEL_LEVEL,json=MDIOBDFUELLEVEL" json:"MDI_OBD_FUEL_LEVEL,omitempty"`
	// Engine Percent Load At Current Speed.
	MDI_OBD_ENGINE_LOAD *munic_type_utils.Integer `protobuf:"bytes,74,opt,name=MDI_OBD_ENGINE_LOAD,json=MDIOBDENGINELOAD" json:"MDI_OBD_ENGINE_LOAD,omitempty"`
	// Engine Fuel Delivery Pressure in psi.
	MDI_OBD_FUEL_PRESSURE *munic_type_utils.Integer `protobuf:"bytes,75,opt,name=MDI_OBD_FUEL_PRESSURE,json=MDIOBDFUELPRESSURE" json:"MDI_OBD_FUEL_PRESSURE,omitempty"`
	// Engine Throttle Position percentage.
	MDI_OBD_THROTTLE_POSITION *munic_type_utils.Integer `protobuf:"bytes,76,opt,name=MDI_OBD_THROTTLE_POSITION,json=MDIOBDTHROTTLEPOSITION" json:"MDI_OBD_THROTTLE_POSITION,omitempty"`
	// Engine oil temperature in Fahrenheit.
	MDI_OBD_ENGINE_OIL_TEMP *munic_type_utils.Integer `protobuf:"bytes,77,opt,name=MDI_OBD_ENGINE_OIL_TEMP,json=MDIOBDENGINEOILTEMP" json:"MDI_OBD_ENGINE_OIL_TEMP,omitempty"`
	// Transmission Oil Temperature in Fahrenheit.
	MDI_OBD_TRANSMISSION_OIL_TEMP *munic_type_utils.Integer `protobuf:"bytes,78,opt,name=MDI_OBD_TRANSMISSION_OIL_TEMP,json=MDIOBDTRANSMISSIONOILTEMP" json:"MDI_OBD_TRANSMISSION_OIL_TEMP,omitempty"`
	// Engine Oil Pressure in psi.
	MDI_OBD_ENGINE_OIL_PRESSURE *munic_type_utils.Integer `protobuf:"bytes,79,opt,name=MDI_OBD_ENGINE_OIL_PRESSURE,json=MDIOBDENGINEOILPRESSURE" json:"MDI_OBD_ENGINE_OIL_PRESSURE,omitempty"`
	// Cruise control state.
	MDI_OBD_CRUISE_CONTROL *munic_type_utils.Boolean `protobuf:"bytes,80,opt,name=MDI_OBD_CRUISE_CONTROL,json=MDIOBDCRUISECONTROL" json:"MDI_OBD_CRUISE_CONTROL,omitempty"`
	// Water In Fuel Indicator.
	MDI_OBD_STATE_WATER_IN_FUEL *munic_type_utils.Boolean `protobuf:"bytes,81,opt,name=MDI_OBD_STATE_WATER_IN_FUEL,json=MDIOBDSTATEWATERINFUEL" json:"MDI_OBD_STATE_WATER_IN_FUEL,omitempty"`
	// Engine Coolant Level percentage.
	MDI_OBD_ENGINE_COOLANT_LEVEL *munic_type_utils.Integer `protobuf:"bytes,82,opt,name=MDI_OBD_ENGINE_COOLANT_LEVEL,json=MDIOBDENGINECOOLANTLEVEL" json:"MDI_OBD_ENGINE_COOLANT_LEVEL,omitempty"`
	// Engine Coolant Temperature in Fahrenheit.
	MDI_OBD_ENGINE_COOLANT_TEMP *munic_type_utils.Integer `protobuf:"bytes,83,opt,name=MDI_OBD_ENGINE_COOLANT_TEMP,json=MDIOBDENGINECOOLANTTEMP" json:"MDI_OBD_ENGINE_COOLANT_TEMP,omitempty"`
	// Engine coolant pressure in psi.
	MDI_OBD_ENGINE_COOLANT_PRESSURE *munic_type_utils.Integer `protobuf:"bytes,84,opt,name=MDI_OBD_ENGINE_COOLANT_PRESSURE,json=MDIOBDENGINECOOLANTPRESSURE" json:"MDI_OBD_ENGINE_COOLANT_PRESSURE,omitempty"`
	// Engine Fuel Delivery Pressure in psi.
	MDI_OBD_FUEL_DELIVERY_PRESSURE *munic_type_utils.Integer `protobuf:"bytes,85,opt,name=MDI_OBD_FUEL_DELIVERY_PRESSURE,json=MDIOBDFUELDELIVERYPRESSURE" json:"MDI_OBD_FUEL_DELIVERY_PRESSURE,omitempty"`
	// Parking Brake Switch.
	MDI_OBD_PARKING_BRAKE_SWITCH *munic_type_utils.Boolean `protobuf:"bytes,86,opt,name=MDI_OBD_PARKING_BRAKE_SWITCH,json=MDIOBDPARKINGBRAKESWITCH" json:"MDI_OBD_PARKING_BRAKE_SWITCH,omitempty"`
	// Stores the serial number of the last connected board (used when 2 devices are
	// connected and using inter board communication).
	CONNECTED_BOARD_ID *munic_type_utils.String `protobuf:"bytes,87,opt,name=CONNECTED_BOARD_ID,json=CONNECTEDBOARDID" json:"CONNECTED_BOARD_ID,omitempty"`
	// TODO: comment this field
	FMS_TOTAL_USED_FUEL *munic_type_utils.Integer `protobuf:"bytes,88,opt,name=FMS_TOTAL_USED_FUEL,json=FMSTOTALUSEDFUEL" json:"FMS_TOTAL_USED_FUEL,omitempty"`
	// TODO: comment this field
	FMS_FUEL_LEVEL *munic_type_utils.Integer `protobuf:"bytes,89,opt,name=FMS_FUEL_LEVEL,json=FMSFUELLEVEL" json:"FMS_FUEL_LEVEL,omitempty"`
	// TODO: comment this field
	FMS_AXLE_LOCATION *munic_type_utils.Integer `protobuf:"bytes,90,opt,name=FMS_AXLE_LOCATION,json=FMSAXLELOCATION" json:"FMS_AXLE_LOCATION,omitempty"`
	// TODO: comment this field
	FMS_AXLE_WEIGHT *munic_type_utils.Integer `protobuf:"bytes,91,opt,name=FMS_AXLE_WEIGHT,json=FMSAXLEWEIGHT" json:"FMS_AXLE_WEIGHT,omitempty"`
	// TODO: comment this field
	FMS_ENGINE_HOURS *munic_type_utils.Integer `protobuf:"bytes,92,opt,name=FMS_ENGINE_HOURS,json=FMSENGINEHOURS" json:"FMS_ENGINE_HOURS,omitempty"`
	// TODO: comment this field
	FMS_VEHICLE_ID *munic_type_utils.String `protobuf:"bytes,93,opt,name=FMS_VEHICLE_ID,json=FMSVEHICLEID" json:"FMS_VEHICLE_ID,omitempty"`
	// TODO: comment this field
	FMS_SOFTWARE_ID *munic_type_utils.String `protobuf:"bytes,94,opt,name=FMS_SOFTWARE_ID,json=FMSSOFTWAREID" json:"FMS_SOFTWARE_ID,omitempty"`
	// TODO: comment this field
	FMS_TOTAL_DISTANCE *munic_type_utils.Integer `protobuf:"bytes,95,opt,name=FMS_TOTAL_DISTANCE,json=FMSTOTALDISTANCE" json:"FMS_TOTAL_DISTANCE,omitempty"`
	// TODO: comment this field
	FMS_NEXT_SERVICE *munic_type_utils.Integer `protobuf:"bytes,96,opt,name=FMS_NEXT_SERVICE,json=FMSNEXTSERVICE" json:"FMS_NEXT_SERVICE,omitempty"`
	// TODO: comment this field
	FMS_ENGINE_COOLANT_TEMP *munic_type_utils.Integer `protobuf:"bytes,97,opt,name=FMS_ENGINE_COOLANT_TEMP,json=FMSENGINECOOLANTTEMP" json:"FMS_ENGINE_COOLANT_TEMP,omitempty"`
	// TODO: comment this field
	FMS_INFORMATION *munic_type_utils.String `protobuf:"bytes,98,opt,name=FMS_INFORMATION,json=FMSINFORMATION" json:"FMS_INFORMATION,omitempty"`
	// Stores the serial number of the board (device).
	BOARD_ID *munic_type_utils.String `protobuf:"bytes,99,opt,name=BOARD_ID,json=BOARDID" json:"BOARD_ID,omitempty"`
	// Id of the event.
	BEHAVE_ID *munic_type_utils.Integer `protobuf:"bytes,100,opt,name=BEHAVE_ID,json=BEHAVEID" json:"BEHAVE_ID,omitempty"`
	// Longitude in hundred thousandths of a degree. Positive means East.
	BEHAVE_LONG *munic_type_utils.Integer `protobuf:"bytes,101,opt,name=BEHAVE_LONG,json=BEHAVELONG" json:"BEHAVE_LONG,omitempty"`
	// Latitude in hundred thousandths of a degree. Positive means North.
	BEHAVE_LAT *munic_type_utils.Integer `protobuf:"bytes,102,opt,name=BEHAVE_LAT,json=BEHAVELAT" json:"BEHAVE_LAT,omitempty"`
	// Date when the event occured. For example 25/10/2012 is transcribed as 121025.
	BEHAVE_DAY_OF_YEAR *munic_type_utils.Integer `protobuf:"bytes,103,opt,name=BEHAVE_DAY_OF_YEAR,json=BEHAVEDAYOFYEAR" json:"BEHAVE_DAY_OF_YEAR,omitempty"`
	// Time when the event occured. For example 14h35 12s is transcribed as 143512.
	BEHAVE_TIME_OF_DAY *munic_type_utils.Integer `protobuf:"bytes,104,opt,name=BEHAVE_TIME_OF_DAY,json=BEHAVETIMEOFDAY" json:"BEHAVE_TIME_OF_DAY,omitempty"`
	// Speed over ground in kilo Knots.
	BEHAVE_GPS_SPEED_BEGIN *munic_type_utils.Integer `protobuf:"bytes,105,opt,name=BEHAVE_GPS_SPEED_BEGIN,json=BEHAVEGPSSPEEDBEGIN" json:"BEHAVE_GPS_SPEED_BEGIN,omitempty"`
	// Speed over ground in kilo Knots.
	BEHAVE_GPS_SPEED_PEAK *munic_type_utils.Integer `protobuf:"bytes,106,opt,name=BEHAVE_GPS_SPEED_PEAK,json=BEHAVEGPSSPEEDPEAK" json:"BEHAVE_GPS_SPEED_PEAK,omitempty"`
	// Speed over ground in kilo Knots.
	BEHAVE_GPS_SPEED_END *munic_type_utils.Integer `protobuf:"bytes,107,opt,name=BEHAVE_GPS_SPEED_END,json=BEHAVEGPSSPEEDEND" json:"BEHAVE_GPS_SPEED_END,omitempty"`
	// Course in thousandths of a degree.
	BEHAVE_GPS_HEADING_BEGIN *munic_type_utils.Integer `protobuf:"bytes,108,opt,name=BEHAVE_GPS_HEADING_BEGIN,json=BEHAVEGPSHEADINGBEGIN" json:"BEHAVE_GPS_HEADING_BEGIN,omitempty"`
	// Course in thousandths of a degree.
	BEHAVE_GPS_HEADING_PEAK *munic_type_utils.Integer `protobuf:"bytes,109,opt,name=BEHAVE_GPS_HEADING_PEAK,json=BEHAVEGPSHEADINGPEAK" json:"BEHAVE_GPS_HEADING_PEAK,omitempty"`
	// Course in thousandths of a degree.
	BEHAVE_GPS_HEADING_END *munic_type_utils.Integer `protobuf:"bytes,110,opt,name=BEHAVE_GPS_HEADING_END,json=BEHAVEGPSHEADINGEND" json:"BEHAVE_GPS_HEADING_END,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_X_BEGIN *munic_type_utils.Integer `protobuf:"bytes,111,opt,name=BEHAVE_ACC_X_BEGIN,json=BEHAVEACCXBEGIN" json:"BEHAVE_ACC_X_BEGIN,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_X_PEAK *munic_type_utils.Integer `protobuf:"bytes,112,opt,name=BEHAVE_ACC_X_PEAK,json=BEHAVEACCXPEAK" json:"BEHAVE_ACC_X_PEAK,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_X_END *munic_type_utils.Integer `protobuf:"bytes,113,opt,name=BEHAVE_ACC_X_END,json=BEHAVEACCXEND" json:"BEHAVE_ACC_X_END,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Y_BEGIN *munic_type_utils.Integer `protobuf:"bytes,114,opt,name=BEHAVE_ACC_Y_BEGIN,json=BEHAVEACCYBEGIN" json:"BEHAVE_ACC_Y_BEGIN,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Y_PEAK *munic_type_utils.Integer `protobuf:"bytes,115,opt,name=BEHAVE_ACC_Y_PEAK,json=BEHAVEACCYPEAK" json:"BEHAVE_ACC_Y_PEAK,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Y_END *munic_type_utils.Integer `protobuf:"bytes,116,opt,name=BEHAVE_ACC_Y_END,json=BEHAVEACCYEND" json:"BEHAVE_ACC_Y_END,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Z_BEGIN *munic_type_utils.Integer `protobuf:"bytes,117,opt,name=BEHAVE_ACC_Z_BEGIN,json=BEHAVEACCZBEGIN" json:"BEHAVE_ACC_Z_BEGIN,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Z_PEAK *munic_type_utils.Integer `protobuf:"bytes,118,opt,name=BEHAVE_ACC_Z_PEAK,json=BEHAVEACCZPEAK" json:"BEHAVE_ACC_Z_PEAK,omitempty"`
	// Acceleration in mG.
	BEHAVE_ACC_Z_END *munic_type_utils.Integer `protobuf:"bytes,119,opt,name=BEHAVE_ACC_Z_END,json=BEHAVEACCZEND" json:"BEHAVE_ACC_Z_END,omitempty"`
	// TODO: comment this field
	BEHAVE_ELAPSED *munic_type_utils.Integer `protobuf:"bytes,120,opt,name=BEHAVE_ELAPSED,json=BEHAVEELAPSED" json:"BEHAVE_ELAPSED,omitempty"`
	// Cyclic counter for easy debug of events.
	BEHAVE_UNIQUE_ID *munic_type_utils.Integer `protobuf:"bytes,121,opt,name=BEHAVE_UNIQUE_ID,json=BEHAVEUNIQUEID" json:"BEHAVE_UNIQUE_ID,omitempty"`
	// TODO: comment this field
	MDI_CRASH_DETECTED *munic_type_utils.String `protobuf:"bytes,122,opt,name=MDI_CRASH_DETECTED,json=MDICRASHDETECTED" json:"MDI_CRASH_DETECTED,omitempty"`
	// Brake Application Pressure in psi.
	MDI_OBD_BRAKE_APPLICATION_PRESSURE *munic_type_utils.Integer `protobuf:"bytes,123,opt,name=MDI_OBD_BRAKE_APPLICATION_PRESSURE,json=MDIOBDBRAKEAPPLICATIONPRESSURE" json:"MDI_OBD_BRAKE_APPLICATION_PRESSURE,omitempty"`
	// Pedal brake status.
	MDI_OBD_BRAKE_PEDAL_STATUS *munic_type_utils.Boolean `protobuf:"bytes,124,opt,name=MDI_OBD_BRAKE_PEDAL_STATUS,json=MDIOBDBRAKEPEDALSTATUS" json:"MDI_OBD_BRAKE_PEDAL_STATUS,omitempty"`
	// Current stack name.
	MDI_OBD_STACK_NAME *munic_type_utils.String `protobuf:"bytes,125,opt,name=MDI_OBD_STACK_NAME,json=MDIOBDSTACKNAME" json:"MDI_OBD_STACK_NAME,omitempty"`
	// TODO: comment this field
	LAST_CALIB_ACCELERO_TIME *munic_type_utils.Integer `protobuf:"bytes,126,opt,name=LAST_CALIB_ACCELERO_TIME,json=LASTCALIBACCELEROTIME" json:"LAST_CALIB_ACCELERO_TIME,omitempty"`
	// Stores both the value of the shutdown field_type and the value of the shutdown
	// reason when the function shutdownRequest is called. It starts with 'S:' and
	// values are separated by a '-'.
	EVENT *munic_type_utils.String `protobuf:"bytes,127,opt,name=EVENT" json:"EVENT,omitempty"`
	// Brake pedal position in percentage (0 means no braking).
	MDI_OBD_BRAKE_PEDAL_POSITION *munic_type_utils.Integer `protobuf:"bytes,128,opt,name=MDI_OBD_BRAKE_PEDAL_POSITION,json=MDIOBDBRAKEPEDALPOSITION" json:"MDI_OBD_BRAKE_PEDAL_POSITION,omitempty"`
	// Magnetization of axis X in milli gauss
	MAGNETO_X *munic_type_utils.Integer `protobuf:"bytes,130,opt,name=MAGNETO_X,json=MAGNETOX" json:"MAGNETO_X,omitempty"`
	// Magnetization of axis Y in milli gauss
	MAGNETO_Y *munic_type_utils.Integer `protobuf:"bytes,131,opt,name=MAGNETO_Y,json=MAGNETOY" json:"MAGNETO_Y,omitempty"`
	// Magnetization of axis Z in milli gauss
	MAGNETO_Z *munic_type_utils.Integer `protobuf:"bytes,132,opt,name=MAGNETO_Z,json=MAGNETOZ" json:"MAGNETO_Z,omitempty"`
	// Heading of the vehicule based on magnetometer information. Measured clockwise
	// from the North, either true or magnetic, in degrees between 0 and 359.
	MAGNETO_HEADING *munic_type_utils.Integer `protobuf:"bytes,133,opt,name=MAGNETO_HEADING,json=MAGNETOHEADING" json:"MAGNETO_HEADING,omitempty"`
	// min internal battery voltage in mV.
	MDI_HEALTH_MIN_BATT_VOLT *munic_type_utils.Integer `protobuf:"bytes,134,opt,name=MDI_HEALTH_MIN_BATT_VOLT,json=MDIHEALTHMINBATTVOLT" json:"MDI_HEALTH_MIN_BATT_VOLT,omitempty"`
	// max internal battery voltage in mV.
	MDI_HEALTH_MAX_BATT_VOLT *munic_type_utils.Integer `protobuf:"bytes,135,opt,name=MDI_HEALTH_MAX_BATT_VOLT,json=MDIHEALTHMAXBATTVOLT" json:"MDI_HEALTH_MAX_BATT_VOLT,omitempty"`
	// Bitmask of flags describing the internal battery status.
	MDI_BATT_STATUS *munic_type_utils.Integer `protobuf:"bytes,136,opt,name=MDI_BATT_STATUS,json=MDIBATTSTATUS" json:"MDI_BATT_STATUS,omitempty"`
	// Time in seconds spent with a speed in the band with id 1. The value of min and
	// max speed of the band depends on the device configuration. Default configuration
	// is minSpeed=0km/h, maxSpeed=49km/h.
	MDI_SPEED_BAND_1 *munic_type_utils.Integer `protobuf:"bytes,138,opt,name=MDI_SPEED_BAND_1,json=MDISPEEDBAND1" json:"MDI_SPEED_BAND_1,omitempty"`
	// Time in seconds spent with a speed in the band with id 2. The value of min and
	// max speed of the band depends on the device configuration. Default configuration
	// is minSpeed=50km/h.
	MDI_SPEED_BAND_2 *munic_type_utils.Integer `protobuf:"bytes,139,opt,name=MDI_SPEED_BAND_2,json=MDISPEEDBAND2" json:"MDI_SPEED_BAND_2,omitempty"`
	// Time in seconds spent with a speed in the band with id 3. The value of min and
	// max speed of the band depends on the device configuration. Default configuration
	// is minSpeed=90km/h.
	MDI_SPEED_BAND_3 *munic_type_utils.Integer `protobuf:"bytes,140,opt,name=MDI_SPEED_BAND_3,json=MDISPEEDBAND3" json:"MDI_SPEED_BAND_3,omitempty"`
	// Time in seconds spent with a speed in the band with id 4. The value of min and
	// max speed of the band depends on the device configuration. Default configuration
	// is minSpeed=140km/h.
	MDI_SPEED_BAND_4 *munic_type_utils.Integer `protobuf:"bytes,141,opt,name=MDI_SPEED_BAND_4,json=MDISPEEDBAND4" json:"MDI_SPEED_BAND_4,omitempty"`
	// Time in seconds spent with a speed in the band with id 5. The value of min and
	// max speed of the band depends on the device configuration. Default configuration
	// is to not use this field.
	MDI_SPEED_BAND_5 *munic_type_utils.Integer `protobuf:"bytes,142,opt,name=MDI_SPEED_BAND_5,json=MDISPEEDBAND5" json:"MDI_SPEED_BAND_5,omitempty"`
	// Time in seconds spent with a RPM in the band with id 1. The value of min and max
	// RPM of the band depends on the device configuration. Default configuration is
	// minRPM=0, maxRPM=999.
	MDI_RPM_BAND_1 *munic_type_utils.Integer `protobuf:"bytes,143,opt,name=MDI_RPM_BAND_1,json=MDIRPMBAND1" json:"MDI_RPM_BAND_1,omitempty"`
	// Time in seconds spent with a RPM in the band with id 2. The value of min and max
	// RPM of the band depends on the device configuration. Default configuration is
	// minRPM=1000, maxRPM=1499.
	MDI_RPM_BAND_2 *munic_type_utils.Integer `protobuf:"bytes,144,opt,name=MDI_RPM_BAND_2,json=MDIRPMBAND2" json:"MDI_RPM_BAND_2,omitempty"`
	// Time in seconds spent with a RPM in the band with id 3. The value of min and max
	// RPM of the band depends on the device configuration. Default configuration is
	// minRPM=1500, maxRPM=2499.
	MDI_RPM_BAND_3 *munic_type_utils.Integer `protobuf:"bytes,145,opt,name=MDI_RPM_BAND_3,json=MDIRPMBAND3" json:"MDI_RPM_BAND_3,omitempty"`
	// Time in seconds spent with a RPM in the band with id 4. The value of min and max
	// RPM of the band depends on the device configuration. Default configuration is
	// minRPM=2500, maxRPM=9999.
	MDI_RPM_BAND_4 *munic_type_utils.Integer `protobuf:"bytes,146,opt,name=MDI_RPM_BAND_4,json=MDIRPMBAND4" json:"MDI_RPM_BAND_4,omitempty"`
	// Time in seconds spent with a RPM in the band with id 5. The value of min and max
	// RPM of the band depends on the device configuration. Default configuration is to
	// not use this field.
	MDI_RPM_BAND_5 *munic_type_utils.Integer `protobuf:"bytes,147,opt,name=MDI_RPM_BAND_5,json=MDIRPMBAND5" json:"MDI_RPM_BAND_5,omitempty"`
	// Alternative VIN when two or more valid VINs are sent by the device.
	MDI_OBD_VIN_ALT *munic_type_utils.Bytes `protobuf:"bytes,148,opt,name=MDI_OBD_VIN_ALT,json=MDIOBDVINALT" json:"MDI_OBD_VIN_ALT,omitempty"`
	// Dashboard mileage in meters when available.
	MDI_DASHBOARD_MILEAGE_METERS *munic_type_utils.Integer `protobuf:"bytes,149,opt,name=MDI_DASHBOARD_MILEAGE_METERS,json=MDIDASHBOARDMILEAGEMETERS" json:"MDI_DASHBOARD_MILEAGE_METERS,omitempty"`
	// TODO: comment this field
	MDI_EXT_BATT_LOW *munic_type_utils.Boolean `protobuf:"bytes,150,opt,name=MDI_EXT_BATT_LOW,json=MDIEXTBATTLOW" json:"MDI_EXT_BATT_LOW,omitempty"`
	// TODO: comment this field
	MDI_EXT_BATT_VOLTAGE *munic_type_utils.Integer `protobuf:"bytes,151,opt,name=MDI_EXT_BATT_VOLTAGE,json=MDIEXTBATTVOLTAGE" json:"MDI_EXT_BATT_VOLTAGE,omitempty"`
	// TODO: comment this field
	MDI_PANIC_STATE *munic_type_utils.Boolean `protobuf:"bytes,152,opt,name=MDI_PANIC_STATE,json=MDIPANICSTATE" json:"MDI_PANIC_STATE,omitempty"`
	// TODO: comment this field
	MDI_PANIC_MESSAGE *munic_type_utils.String `protobuf:"bytes,153,opt,name=MDI_PANIC_MESSAGE,json=MDIPANICMESSAGE" json:"MDI_PANIC_MESSAGE,omitempty"`
	// TODO: comment this field
	MDI_DTC_MIL *munic_type_utils.Boolean `protobuf:"bytes,154,opt,name=MDI_DTC_MIL,json=MDIDTCMIL" json:"MDI_DTC_MIL,omitempty"`
	// TODO: comment this field
	MDI_DTC_NUMBER *munic_type_utils.Integer `protobuf:"bytes,155,opt,name=MDI_DTC_NUMBER,json=MDIDTCNUMBER" json:"MDI_DTC_NUMBER,omitempty"`
	// TODO: comment this field
	MDI_DTC_LIST *munic_type_utils.String `protobuf:"bytes,156,opt,name=MDI_DTC_LIST,json=MDIDTCLIST" json:"MDI_DTC_LIST,omitempty"`
	// TODO: comment this field
	MDI_RPM_MAX *munic_type_utils.Integer `protobuf:"bytes,157,opt,name=MDI_RPM_MAX,json=MDIRPMMAX" json:"MDI_RPM_MAX,omitempty"`
	// TODO: comment this field
	MDI_RPM_MIN *munic_type_utils.Integer `protobuf:"bytes,158,opt,name=MDI_RPM_MIN,json=MDIRPMMIN" json:"MDI_RPM_MIN,omitempty"`
	// TODO: comment this field
	MDI_RPM_AVERAGE *munic_type_utils.Integer `protobuf:"bytes,159,opt,name=MDI_RPM_AVERAGE,json=MDIRPMAVERAGE" json:"MDI_RPM_AVERAGE,omitempty"`
	// TODO: comment this field
	MDI_RPM_OVER *munic_type_utils.Boolean `protobuf:"bytes,160,opt,name=MDI_RPM_OVER,json=MDIRPMOVER" json:"MDI_RPM_OVER,omitempty"`
	// TODO: comment this field
	MDI_RPM_AVERAGE_RANGE_1 *munic_type_utils.Integer `protobuf:"bytes,161,opt,name=MDI_RPM_AVERAGE_RANGE_1,json=MDIRPMAVERAGERANGE1" json:"MDI_RPM_AVERAGE_RANGE_1,omitempty"`
	// TODO: comment this field
	MDI_RPM_AVERAGE_RANGE_2 *munic_type_utils.Integer `protobuf:"bytes,162,opt,name=MDI_RPM_AVERAGE_RANGE_2,json=MDIRPMAVERAGERANGE2" json:"MDI_RPM_AVERAGE_RANGE_2,omitempty"`
	// TODO: comment this field
	MDI_RPM_AVERAGE_RANGE_3 *munic_type_utils.Integer `protobuf:"bytes,163,opt,name=MDI_RPM_AVERAGE_RANGE_3,json=MDIRPMAVERAGERANGE3" json:"MDI_RPM_AVERAGE_RANGE_3,omitempty"`
	// TODO: comment this field
	MDI_RPM_AVERAGE_RANGE_4 *munic_type_utils.Integer `protobuf:"bytes,164,opt,name=MDI_RPM_AVERAGE_RANGE_4,json=MDIRPMAVERAGERANGE4" json:"MDI_RPM_AVERAGE_RANGE_4,omitempty"`
	// TODO: comment this field
	MDI_SENSORS_RECORDER_DATA *munic_type_utils.Bytes `protobuf:"bytes,165,opt,name=MDI_SENSORS_RECORDER_DATA,json=MDISENSORSRECORDERDATA" json:"MDI_SENSORS_RECORDER_DATA,omitempty"`
	// TODO: comment this field
	MDI_SENSORS_RECORDER_CALIBRATION *munic_type_utils.Bytes `protobuf:"bytes,166,opt,name=MDI_SENSORS_RECORDER_CALIBRATION,json=MDISENSORSRECORDERCALIBRATION" json:"MDI_SENSORS_RECORDER_CALIBRATION,omitempty"`
	// TODO: comment this field
	MDI_ODO_PARTIAL_METER *munic_type_utils.Integer `protobuf:"bytes,167,opt,name=MDI_ODO_PARTIAL_METER,json=MDIODOPARTIALMETER" json:"MDI_ODO_PARTIAL_METER,omitempty"`
	// TODO: comment this field
	MDI_ODO_FULL_METER *munic_type_utils.Integer `protobuf:"bytes,168,opt,name=MDI_ODO_FULL_METER,json=MDIODOFULLMETER" json:"MDI_ODO_FULL_METER,omitempty"`
	// Index that matches the BT device's MAC in the Array of MACs to record.
	MDI_BT_DEVICE_INDEX *munic_type_utils.Integer `protobuf:"bytes,169,opt,name=MDI_BT_DEVICE_INDEX,json=MDIBTDEVICEINDEX" json:"MDI_BT_DEVICE_INDEX,omitempty"`
	// Temperature recorded by the BT device in degrees.
	MDI_BT_TEMPERATURE *munic_type_utils.Integer `protobuf:"bytes,170,opt,name=MDI_BT_TEMPERATURE,json=MDIBTTEMPERATURE" json:"MDI_BT_TEMPERATURE,omitempty"`
	// Light level recorded by the BT device in lux.
	MDI_BT_LIGHT_LEVEL *munic_type_utils.Integer `protobuf:"bytes,171,opt,name=MDI_BT_LIGHT_LEVEL,json=MDIBTLIGHTLEVEL" json:"MDI_BT_LIGHT_LEVEL,omitempty"`
	// Humidity recorded by the BT device in %.
	MDI_BT_HUMIDITY *munic_type_utils.Integer `protobuf:"bytes,172,opt,name=MDI_BT_HUMIDITY,json=MDIBTHUMIDITY" json:"MDI_BT_HUMIDITY,omitempty"`
	// Last accelerometer data on X's device component, in mm.s-2. Be aware that the
	// value is in mm.s-2 and not in m.s-2.
	MDI_BT_ACCELEROX *munic_type_utils.Integer `protobuf:"bytes,173,opt,name=MDI_BT_ACCELEROX,json=MDIBTACCELEROX" json:"MDI_BT_ACCELEROX,omitempty"`
	// Last accelerometer data on Y's device component, in mm.s-2. Be aware that the
	// value is in mm.s-2 and not in m.s-2.
	MDI_BT_ACCELEROY *munic_type_utils.Integer `protobuf:"bytes,174,opt,name=MDI_BT_ACCELEROY,json=MDIBTACCELEROY" json:"MDI_BT_ACCELEROY,omitempty"`
	// Last accelerometer data on Z's device component, in mm.s-2. Be aware that the
	// value is in mm.s-2 and not in m.s-2.
	MDI_BT_ACCELEROZ *munic_type_utils.Integer `protobuf:"bytes,175,opt,name=MDI_BT_ACCELEROZ,json=MDIBTACCELEROZ" json:"MDI_BT_ACCELEROZ,omitempty"`
	// Passive InfraRed motion. 0 if the device is not in movement, 1 if the device is
	// moving.
	MDI_BT_PIR *munic_type_utils.Integer `protobuf:"bytes,176,opt,name=MDI_BT_PIR,json=MDIBTPIR" json:"MDI_BT_PIR,omitempty"`
	// Current country code as defined by ISO 3166-1.
	MDI_ZONE_COUNTRY *munic_type_utils.String `protobuf:"bytes,177,opt,name=MDI_ZONE_COUNTRY,json=MDIZONECOUNTRY" json:"MDI_ZONE_COUNTRY,omitempty"`
	// Current state code as defined by ISO 3166-2.
	MDI_ZONE_STATE *munic_type_utils.String `protobuf:"bytes,178,opt,name=MDI_ZONE_STATE,json=MDIZONESTATE" json:"MDI_ZONE_STATE,omitempty"`
	// TODO: comment this field
	MDI_GPS_ANTENNA *munic_type_utils.Boolean `protobuf:"bytes,193,opt,name=MDI_GPS_ANTENNA,json=MDIGPSANTENNA" json:"MDI_GPS_ANTENNA,omitempty"`
	// TODO: comment this field
	MDI_DIO_AIN1 *munic_type_utils.Integer `protobuf:"bytes,194,opt,name=MDI_DIO_AIN1,json=MDIDIOAIN1" json:"MDI_DIO_AIN1,omitempty"`
	// Available space in bytes.
	MDI_HEALTH_WRITEDIR_FREE *munic_type_utils.Integer `protobuf:"bytes,195,opt,name=MDI_HEALTH_WRITEDIR_FREE,json=MDIHEALTHWRITEDIRFREE" json:"MDI_HEALTH_WRITEDIR_FREE,omitempty"`
	// Number of open file descriptors.
	MDI_HEALTH_OPENED_FDS *munic_type_utils.Integer `protobuf:"bytes,196,opt,name=MDI_HEALTH_OPENED_FDS,json=MDIHEALTHOPENEDFDS" json:"MDI_HEALTH_OPENED_FDS,omitempty"`
	// Number of threads on the device.
	MDI_HEALTH_THREADS *munic_type_utils.Integer `protobuf:"bytes,197,opt,name=MDI_HEALTH_THREADS,json=MDIHEALTHTHREADS" json:"MDI_HEALTH_THREADS,omitempty"`
	// Load average in percentile.
	MDI_HEALTH_LOADAVG15 *munic_type_utils.Integer `protobuf:"bytes,198,opt,name=MDI_HEALTH_LOADAVG15,json=MDIHEALTHLOADAVG15" json:"MDI_HEALTH_LOADAVG15,omitempty"`
	// Minimum temperature of the battery in milli celcius.
	MDI_HEALTH_MIN_BATT_TEMP *munic_type_utils.Integer `protobuf:"bytes,199,opt,name=MDI_HEALTH_MIN_BATT_TEMP,json=MDIHEALTHMINBATTTEMP" json:"MDI_HEALTH_MIN_BATT_TEMP,omitempty"`
	// Maximum temperature of the battery in milli celcius.
	MDI_HEALTH_MAX_BATT_TEMP *munic_type_utils.Integer `protobuf:"bytes,200,opt,name=MDI_HEALTH_MAX_BATT_TEMP,json=MDIHEALTHMAXBATTTEMP" json:"MDI_HEALTH_MAX_BATT_TEMP,omitempty"`
	// Minimum temperature of the casing in milli celcius.
	MDI_HEALTH_MIN_CASE_TEMP *munic_type_utils.Integer `protobuf:"bytes,201,opt,name=MDI_HEALTH_MIN_CASE_TEMP,json=MDIHEALTHMINCASETEMP" json:"MDI_HEALTH_MIN_CASE_TEMP,omitempty"`
	// Maximum temperature of the casing in milli celcius.
	MDI_HEALTH_MAX_CASE_TEMP *munic_type_utils.Integer `protobuf:"bytes,202,opt,name=MDI_HEALTH_MAX_CASE_TEMP,json=MDIHEALTHMAXCASETEMP" json:"MDI_HEALTH_MAX_CASE_TEMP,omitempty"`
	// TODO: comment this field
	MDI_CAN0_ERROR *munic_type_utils.Integer `protobuf:"bytes,203,opt,name=MDI_CAN0_ERROR,json=MDICAN0ERROR" json:"MDI_CAN0_ERROR,omitempty"`
	// TODO: comment this field
	MDI_CAN1_ERROR *munic_type_utils.Integer `protobuf:"bytes,204,opt,name=MDI_CAN1_ERROR,json=MDICAN1ERROR" json:"MDI_CAN1_ERROR,omitempty"`
	// Hash string that is unique per VIN.
	MDI_OBD_VIN_HASH *munic_type_utils.Bytes `protobuf:"bytes,213,opt,name=MDI_OBD_VIN_HASH,json=MDIOBDVINHASH" json:"MDI_OBD_VIN_HASH,omitempty"`
	// Number incremented every time a journey starts (MDI_JOURNEY_STATE is set to 1).
	MDI_JOURNEY_ID *munic_type_utils.Integer `protobuf:"bytes,214,opt,name=MDI_JOURNEY_ID,json=MDIJOURNEYID" json:"MDI_JOURNEY_ID,omitempty"`
	// TODO: comment this field
	MDI_OBD_PID_1 *munic_type_utils.Bytes `protobuf:"bytes,215,opt,name=MDI_OBD_PID_1,json=MDIOBDPID1" json:"MDI_OBD_PID_1,omitempty"`
	// TODO: comment this field
	MDI_OBD_PID_2 *munic_type_utils.Bytes `protobuf:"bytes,216,opt,name=MDI_OBD_PID_2,json=MDIOBDPID2" json:"MDI_OBD_PID_2,omitempty"`
	// TODO: comment this field
	MDI_OBD_PID_3 *munic_type_utils.Bytes `protobuf:"bytes,217,opt,name=MDI_OBD_PID_3,json=MDIOBDPID3" json:"MDI_OBD_PID_3,omitempty"`
	// TODO: comment this field
	MDI_OBD_PID_4 *munic_type_utils.Bytes `protobuf:"bytes,218,opt,name=MDI_OBD_PID_4,json=MDIOBDPID4" json:"MDI_OBD_PID_4,omitempty"`
	// TODO: comment this field
	MDI_OBD_PID_5 *munic_type_utils.Bytes `protobuf:"bytes,219,opt,name=MDI_OBD_PID_5,json=MDIOBDPID5" json:"MDI_OBD_PID_5,omitempty"`
	// Mileage obtained from the dashboard.
	MDI_DASHBOARD_MILEAGE *munic_type_utils.Integer `protobuf:"bytes,223,opt,name=MDI_DASHBOARD_MILEAGE,json=MDIDASHBOARDMILEAGE" json:"MDI_DASHBOARD_MILEAGE,omitempty"`
	// Fuel percentage obtained from the dashboard.
	MDI_DASHBOARD_FUEL *munic_type_utils.Integer `protobuf:"bytes,224,opt,name=MDI_DASHBOARD_FUEL,json=MDIDASHBOARDFUEL" json:"MDI_DASHBOARD_FUEL,omitempty"`
	// Fuel level obtained from the dashboard.
	MDI_DASHBOARD_FUEL_LEVEL *munic_type_utils.Integer `protobuf:"bytes,225,opt,name=MDI_DASHBOARD_FUEL_LEVEL,json=MDIDASHBOARDFUELLEVEL" json:"MDI_DASHBOARD_FUEL_LEVEL,omitempty"`
	// TODO: comment this field
	MDI_DIAG_1 *munic_type_utils.Bytes `protobuf:"bytes,226,opt,name=MDI_DIAG_1,json=MDIDIAG1" json:"MDI_DIAG_1,omitempty"`
	// TODO: comment this field
	MDI_DIAG_2 *munic_type_utils.Bytes `protobuf:"bytes,227,opt,name=MDI_DIAG_2,json=MDIDIAG2" json:"MDI_DIAG_2,omitempty"`
	// TODO: comment this field
	MDI_DIAG_3 *munic_type_utils.Bytes `protobuf:"bytes,228,opt,name=MDI_DIAG_3,json=MDIDIAG3" json:"MDI_DIAG_3,omitempty"`
	// Anonymized VIN obtained from the VIN of the vehicle.
	MDI_OBD_SQUISH_VIN *munic_type_utils.Bytes `protobuf:"bytes,229,opt,name=MDI_OBD_SQUISH_VIN,json=MDIOBDSQUISHVIN" json:"MDI_OBD_SQUISH_VIN,omitempty"`
	// List of pending DTCs.
	MDI_PENDING_DTC_LIST *munic_type_utils.String `protobuf:"bytes,230,opt,name=MDI_PENDING_DTC_LIST,json=MDIPENDINGDTCLIST" json:"MDI_PENDING_DTC_LIST,omitempty"`
	// Max RPM in last over-RPM session.
	MDI_MAX_RPM_IN_LAST_OVER_RPM *munic_type_utils.Integer `protobuf:"bytes,231,opt,name=MDI_MAX_RPM_IN_LAST_OVER_RPM,json=MDIMAXRPMINLASTOVERRPM" json:"MDI_MAX_RPM_IN_LAST_OVER_RPM,omitempty"`
	// Mileage in meters obtained from the OBD stack.
	MDI_OBD_MILEAGE_METERS *munic_type_utils.Integer `protobuf:"bytes,232,opt,name=MDI_OBD_MILEAGE_METERS,json=MDIOBDMILEAGEMETERS" json:"MDI_OBD_MILEAGE_METERS,omitempty"`
	// True if car is idling, false otherwise.
	MDI_IDLE_STATE *munic_type_utils.Boolean `protobuf:"bytes,233,opt,name=MDI_IDLE_STATE,json=MDIIDLESTATE" json:"MDI_IDLE_STATE,omitempty"`
	// TODO: comment this field
	MDI_VEHICLE_STATE *munic_type_utils.String `protobuf:"bytes,234,opt,name=MDI_VEHICLE_STATE,json=MDIVEHICLESTATE" json:"MDI_VEHICLE_STATE,omitempty"`
	// Speed value obtained from the OBD stack.
	MDI_OBD_SPEED *munic_type_utils.Integer `protobuf:"bytes,235,opt,name=MDI_OBD_SPEED,json=MDIOBDSPEED" json:"MDI_OBD_SPEED,omitempty"`
	// Engine RPM obtained from the OBD stack.
	MDI_OBD_RPM *munic_type_utils.Integer `protobuf:"bytes,236,opt,name=MDI_OBD_RPM,json=MDIOBDRPM" json:"MDI_OBD_RPM,omitempty"`
	// Quantity of fuel used obtained from the OBD stack.
	MDI_OBD_FUEL *munic_type_utils.Integer `protobuf:"bytes,237,opt,name=MDI_OBD_FUEL,json=MDIOBDFUEL" json:"MDI_OBD_FUEL,omitempty"`
	// VIN obtained from the OBD stack.
	MDI_OBD_VIN *munic_type_utils.Bytes `protobuf:"bytes,238,opt,name=MDI_OBD_VIN,json=MDIOBDVIN" json:"MDI_OBD_VIN,omitempty"`
	// Mileage obtained from the OBD stack.
	MDI_OBD_MILEAGE *munic_type_utils.Integer `protobuf:"bytes,239,opt,name=MDI_OBD_MILEAGE,json=MDIOBDMILEAGE" json:"MDI_OBD_MILEAGE,omitempty"`
	// TODO: comment this field
	MDI_JOURNEY_TIME *munic_type_utils.Integer `protobuf:"bytes,240,opt,name=MDI_JOURNEY_TIME,json=MDIJOURNEYTIME" json:"MDI_JOURNEY_TIME,omitempty"`
	// TODO: comment this field
	MDI_IDLE_JOURNEY *munic_type_utils.Integer `protobuf:"bytes,241,opt,name=MDI_IDLE_JOURNEY,json=MDIIDLEJOURNEY" json:"MDI_IDLE_JOURNEY,omitempty"`
	// TODO: comment this field
	MDI_DRIVING_JOURNEY *munic_type_utils.Integer `protobuf:"bytes,242,opt,name=MDI_DRIVING_JOURNEY,json=MDIDRIVINGJOURNEY" json:"MDI_DRIVING_JOURNEY,omitempty"`
	// Max speed measured during last overspeed session (km/h).
	MDI_MAX_SPEED_IN_LAST_OVERSPEED *munic_type_utils.Integer `protobuf:"bytes,243,opt,name=MDI_MAX_SPEED_IN_LAST_OVERSPEED,json=MDIMAXSPEEDINLASTOVERSPEED" json:"MDI_MAX_SPEED_IN_LAST_OVERSPEED,omitempty"`
	// TODO: comment this field
	MDI_OVERSPEED_COUNTER *munic_type_utils.Integer `protobuf:"bytes,244,opt,name=MDI_OVERSPEED_COUNTER,json=MDIOVERSPEEDCOUNTER" json:"MDI_OVERSPEED_COUNTER,omitempty"`
	// TODO: comment this field
	MDI_TOW_AWAY *munic_type_utils.Boolean `protobuf:"bytes,245,opt,name=MDI_TOW_AWAY,json=MDITOWAWAY" json:"MDI_TOW_AWAY,omitempty"`
	// km
	MDI_ODO_JOURNEY *munic_type_utils.Integer `protobuf:"bytes,246,opt,name=MDI_ODO_JOURNEY,json=MDIODOJOURNEY" json:"MDI_ODO_JOURNEY,omitempty"`
	// TODO: comment this field
	MDI_OVERSPEED *munic_type_utils.Boolean `protobuf:"bytes,247,opt,name=MDI_OVERSPEED,json=MDIOVERSPEED" json:"MDI_OVERSPEED,omitempty"`
	// km/h
	MDI_MAX_SPEED_JOURNEY *munic_type_utils.Integer `protobuf:"bytes,248,opt,name=MDI_MAX_SPEED_JOURNEY,json=MDIMAXSPEEDJOURNEY" json:"MDI_MAX_SPEED_JOURNEY,omitempty"`
	// TODO: comment this field
	MDI_JOURNEY_STATE *munic_type_utils.Boolean `protobuf:"bytes,249,opt,name=MDI_JOURNEY_STATE,json=MDIJOURNEYSTATE" json:"MDI_JOURNEY_STATE,omitempty"`
	// TODO: comment this field
	MDI_RECORD_REASON *munic_type_utils.String `protobuf:"bytes,250,opt,name=MDI_RECORD_REASON,json=MDIRECORDREASON" json:"MDI_RECORD_REASON,omitempty"`
}

func (m *MunicFields) Reset()                    { *m = MunicFields{} }
func (m *MunicFields) String() string            { return proto.CompactTextString(m) }
func (*MunicFields) ProtoMessage()               {}
func (*MunicFields) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MunicFields) GetPOSITION() *google_type.LatLng {
	if m != nil {
		return m.POSITION
	}
	return nil
}

func (m *MunicFields) GetGPRMC_VALID() *munic_type_utils.String {
	if m != nil {
		return m.GPRMC_VALID
	}
	return nil
}

func (m *MunicFields) GetGPS_SPEED() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_SPEED
	}
	return nil
}

func (m *MunicFields) GetGPS_DIR() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_DIR
	}
	return nil
}

func (m *MunicFields) GetGPS_ALTITUDE() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_ALTITUDE
	}
	return nil
}

func (m *MunicFields) GetDIO_IGNITION() *munic_type_utils.Boolean {
	if m != nil {
		return m.DIO_IGNITION
	}
	return nil
}

func (m *MunicFields) GetBATT() *munic_type_utils.Integer {
	if m != nil {
		return m.BATT
	}
	return nil
}

func (m *MunicFields) GetGPRS_HEADER() *munic_type_utils.Integer {
	if m != nil {
		return m.GPRS_HEADER
	}
	return nil
}

func (m *MunicFields) GetRSSI() *munic_type_utils.Integer {
	if m != nil {
		return m.RSSI
	}
	return nil
}

func (m *MunicFields) GetMDI_EXT_BATT_PRESENT() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_EXT_BATT_PRESENT
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_FIRST_DRIVER_STATE() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_FIRST_DRIVER_STATE
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_FIRST_DRIVER_DRIVING_STATE() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_FIRST_DRIVER_DRIVING_STATE
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_DAILYMETER() *munic_type_utils.Integer {
	if m != nil {
		return m.TACHOGRAPH_DAILYMETER
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_ODOMETER() *munic_type_utils.Integer {
	if m != nil {
		return m.TACHOGRAPH_ODOMETER
	}
	return nil
}

func (m *MunicFields) GetODO_PARTIAL_KM() *munic_type_utils.String {
	if m != nil {
		return m.ODO_PARTIAL_KM
	}
	return nil
}

func (m *MunicFields) GetODO_FULL() *munic_type_utils.Integer {
	if m != nil {
		return m.ODO_FULL
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_DRIVING_TIME() *munic_type_utils.Integer {
	if m != nil {
		return m.TACHOGRAPH_DRIVING_TIME
	}
	return nil
}

func (m *MunicFields) GetDIO_ALARM() *munic_type_utils.Boolean {
	if m != nil {
		return m.DIO_ALARM
	}
	return nil
}

func (m *MunicFields) GetDRIVER_ID() *munic_type_utils.String {
	if m != nil {
		return m.DRIVER_ID
	}
	return nil
}

func (m *MunicFields) GetTEMP_1() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_1
	}
	return nil
}

func (m *MunicFields) GetTEMP_2() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_2
	}
	return nil
}

func (m *MunicFields) GetTEMP_3() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_3
	}
	return nil
}

func (m *MunicFields) GetTEMP_4() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_4
	}
	return nil
}

func (m *MunicFields) GetTEMP_5() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_5
	}
	return nil
}

func (m *MunicFields) GetTEMP_6() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_6
	}
	return nil
}

func (m *MunicFields) GetTEMP_7() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_7
	}
	return nil
}

func (m *MunicFields) GetTEMP_8() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_8
	}
	return nil
}

func (m *MunicFields) GetTEMP_9() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_9
	}
	return nil
}

func (m *MunicFields) GetTEMP_10() *munic_type_utils.Integer {
	if m != nil {
		return m.TEMP_10
	}
	return nil
}

func (m *MunicFields) GetDIO_IN_TOR() *munic_type_utils.Bytes {
	if m != nil {
		return m.DIO_IN_TOR
	}
	return nil
}

func (m *MunicFields) GetGPS_HDOP() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_HDOP
	}
	return nil
}

func (m *MunicFields) GetGPS_VDOP() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_VDOP
	}
	return nil
}

func (m *MunicFields) GetGPS_PDOP() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_PDOP
	}
	return nil
}

func (m *MunicFields) GetBATT_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.BATT_TEMP
	}
	return nil
}

func (m *MunicFields) GetCASE_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.CASE_TEMP
	}
	return nil
}

func (m *MunicFields) GetMODEM_NETWORK_OPERATOR() *munic_type_utils.String {
	if m != nil {
		return m.MODEM_NETWORK_OPERATOR
	}
	return nil
}

func (m *MunicFields) GetOBD_CONNECTED_PROTOCOL() *munic_type_utils.Integer {
	if m != nil {
		return m.OBD_CONNECTED_PROTOCOL
	}
	return nil
}

func (m *MunicFields) GetGPS_AVERAGE_PDOP_STATUS() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_AVERAGE_PDOP_STATUS
	}
	return nil
}

func (m *MunicFields) GetMDI_LAST_VALID_GPS_LATITUDE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_LAST_VALID_GPS_LATITUDE
	}
	return nil
}

func (m *MunicFields) GetMDI_LAST_VALID_GPS_LONGITUDE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_LAST_VALID_GPS_LONGITUDE
	}
	return nil
}

func (m *MunicFields) GetFMS_FUEL_LEVEL_2() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_FUEL_LEVEL_2
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_FUEL_LEVEL_RATIO() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_FUEL_LEVEL_RATIO
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_FIRST_DRIVER_ID() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_FIRST_DRIVER_ID
	}
	return nil
}

func (m *MunicFields) GetAREA_LIST() *munic_type_utils.String {
	if m != nil {
		return m.AREA_LIST
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_TIMESTAMP() *munic_type_utils.Integer {
	if m != nil {
		return m.TACHOGRAPH_TIMESTAMP
	}
	return nil
}

func (m *MunicFields) GetGPS_FIXED_SAT_NUM() *munic_type_utils.Integer {
	if m != nil {
		return m.GPS_FIXED_SAT_NUM
	}
	return nil
}

func (m *MunicFields) GetMVT_STATE() *munic_type_utils.Boolean {
	if m != nil {
		return m.MVT_STATE
	}
	return nil
}

func (m *MunicFields) GetBOOT_REASON() *munic_type_utils.String {
	if m != nil {
		return m.BOOT_REASON
	}
	return nil
}

func (m *MunicFields) GetSHUTDOWN_TYPE_AND_REASON() *munic_type_utils.String {
	if m != nil {
		return m.SHUTDOWN_TYPE_AND_REASON
	}
	return nil
}

func (m *MunicFields) GetBATT_VOLT() *munic_type_utils.Integer {
	if m != nil {
		return m.BATT_VOLT
	}
	return nil
}

func (m *MunicFields) GetTX_KBYTES() *munic_type_utils.Integer {
	if m != nil {
		return m.TX_KBYTES
	}
	return nil
}

func (m *MunicFields) GetRX_KBYTES() *munic_type_utils.Integer {
	if m != nil {
		return m.RX_KBYTES
	}
	return nil
}

func (m *MunicFields) GetBATT_WARMUP() *munic_type_utils.Integer {
	if m != nil {
		return m.BATT_WARMUP
	}
	return nil
}

func (m *MunicFields) GetBATT_CHARGING() *munic_type_utils.Boolean {
	if m != nil {
		return m.BATT_CHARGING
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_SECOND_DRIVER_STATE() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_SECOND_DRIVER_STATE
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_SECOND_DRIVER_ID() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_SECOND_DRIVER_ID
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_VRN() *munic_type_utils.String {
	if m != nil {
		return m.TACHOGRAPH_VRN
	}
	return nil
}

func (m *MunicFields) GetTACHOGRAPH_VIN() *munic_type_utils.Bytes {
	if m != nil {
		return m.TACHOGRAPH_VIN
	}
	return nil
}

func (m *MunicFields) GetDIO_OUT_TOR() *munic_type_utils.Bytes {
	if m != nil {
		return m.DIO_OUT_TOR
	}
	return nil
}

func (m *MunicFields) GetRELAYCONTROL_STATE() *munic_type_utils.Boolean {
	if m != nil {
		return m.RELAYCONTROL_STATE
	}
	return nil
}

func (m *MunicFields) GetMODEM_SIM_ICCID() *munic_type_utils.String {
	if m != nil {
		return m.MODEM_SIM_ICCID
	}
	return nil
}

func (m *MunicFields) GetMODEM_SIM_IMSI() *munic_type_utils.String {
	if m != nil {
		return m.MODEM_SIM_IMSI
	}
	return nil
}

func (m *MunicFields) GetSERIAL_PPP_STATE() *munic_type_utils.Integer {
	if m != nil {
		return m.SERIAL_PPP_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_FUEL_LEVEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_FUEL_LEVEL
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_LOAD() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_LOAD
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_FUEL_PRESSURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_FUEL_PRESSURE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_THROTTLE_POSITION() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_THROTTLE_POSITION
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_OIL_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_OIL_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_TRANSMISSION_OIL_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_TRANSMISSION_OIL_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_OIL_PRESSURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_OIL_PRESSURE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_CRUISE_CONTROL() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_OBD_CRUISE_CONTROL
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_STATE_WATER_IN_FUEL() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_OBD_STATE_WATER_IN_FUEL
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_COOLANT_LEVEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_COOLANT_LEVEL
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_COOLANT_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_COOLANT_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_ENGINE_COOLANT_PRESSURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_ENGINE_COOLANT_PRESSURE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_FUEL_DELIVERY_PRESSURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_FUEL_DELIVERY_PRESSURE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PARKING_BRAKE_SWITCH() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_OBD_PARKING_BRAKE_SWITCH
	}
	return nil
}

func (m *MunicFields) GetCONNECTED_BOARD_ID() *munic_type_utils.String {
	if m != nil {
		return m.CONNECTED_BOARD_ID
	}
	return nil
}

func (m *MunicFields) GetFMS_TOTAL_USED_FUEL() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_TOTAL_USED_FUEL
	}
	return nil
}

func (m *MunicFields) GetFMS_FUEL_LEVEL() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_FUEL_LEVEL
	}
	return nil
}

func (m *MunicFields) GetFMS_AXLE_LOCATION() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_AXLE_LOCATION
	}
	return nil
}

func (m *MunicFields) GetFMS_AXLE_WEIGHT() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_AXLE_WEIGHT
	}
	return nil
}

func (m *MunicFields) GetFMS_ENGINE_HOURS() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_ENGINE_HOURS
	}
	return nil
}

func (m *MunicFields) GetFMS_VEHICLE_ID() *munic_type_utils.String {
	if m != nil {
		return m.FMS_VEHICLE_ID
	}
	return nil
}

func (m *MunicFields) GetFMS_SOFTWARE_ID() *munic_type_utils.String {
	if m != nil {
		return m.FMS_SOFTWARE_ID
	}
	return nil
}

func (m *MunicFields) GetFMS_TOTAL_DISTANCE() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_TOTAL_DISTANCE
	}
	return nil
}

func (m *MunicFields) GetFMS_NEXT_SERVICE() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_NEXT_SERVICE
	}
	return nil
}

func (m *MunicFields) GetFMS_ENGINE_COOLANT_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.FMS_ENGINE_COOLANT_TEMP
	}
	return nil
}

func (m *MunicFields) GetFMS_INFORMATION() *munic_type_utils.String {
	if m != nil {
		return m.FMS_INFORMATION
	}
	return nil
}

func (m *MunicFields) GetBOARD_ID() *munic_type_utils.String {
	if m != nil {
		return m.BOARD_ID
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ID() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ID
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_LONG() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_LONG
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_LAT() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_LAT
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_DAY_OF_YEAR() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_DAY_OF_YEAR
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_TIME_OF_DAY() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_TIME_OF_DAY
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_SPEED_BEGIN() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_SPEED_BEGIN
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_SPEED_PEAK() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_SPEED_PEAK
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_SPEED_END() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_SPEED_END
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_HEADING_BEGIN() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_HEADING_BEGIN
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_HEADING_PEAK() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_HEADING_PEAK
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_GPS_HEADING_END() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_GPS_HEADING_END
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_X_BEGIN() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_X_BEGIN
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_X_PEAK() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_X_PEAK
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_X_END() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_X_END
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Y_BEGIN() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Y_BEGIN
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Y_PEAK() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Y_PEAK
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Y_END() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Y_END
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Z_BEGIN() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Z_BEGIN
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Z_PEAK() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Z_PEAK
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ACC_Z_END() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ACC_Z_END
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_ELAPSED() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_ELAPSED
	}
	return nil
}

func (m *MunicFields) GetBEHAVE_UNIQUE_ID() *munic_type_utils.Integer {
	if m != nil {
		return m.BEHAVE_UNIQUE_ID
	}
	return nil
}

func (m *MunicFields) GetMDI_CRASH_DETECTED() *munic_type_utils.String {
	if m != nil {
		return m.MDI_CRASH_DETECTED
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_BRAKE_APPLICATION_PRESSURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_BRAKE_APPLICATION_PRESSURE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_BRAKE_PEDAL_STATUS() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_OBD_BRAKE_PEDAL_STATUS
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_STACK_NAME() *munic_type_utils.String {
	if m != nil {
		return m.MDI_OBD_STACK_NAME
	}
	return nil
}

func (m *MunicFields) GetLAST_CALIB_ACCELERO_TIME() *munic_type_utils.Integer {
	if m != nil {
		return m.LAST_CALIB_ACCELERO_TIME
	}
	return nil
}

func (m *MunicFields) GetEVENT() *munic_type_utils.String {
	if m != nil {
		return m.EVENT
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_BRAKE_PEDAL_POSITION() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_BRAKE_PEDAL_POSITION
	}
	return nil
}

func (m *MunicFields) GetMAGNETO_X() *munic_type_utils.Integer {
	if m != nil {
		return m.MAGNETO_X
	}
	return nil
}

func (m *MunicFields) GetMAGNETO_Y() *munic_type_utils.Integer {
	if m != nil {
		return m.MAGNETO_Y
	}
	return nil
}

func (m *MunicFields) GetMAGNETO_Z() *munic_type_utils.Integer {
	if m != nil {
		return m.MAGNETO_Z
	}
	return nil
}

func (m *MunicFields) GetMAGNETO_HEADING() *munic_type_utils.Integer {
	if m != nil {
		return m.MAGNETO_HEADING
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MIN_BATT_VOLT() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MIN_BATT_VOLT
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MAX_BATT_VOLT() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MAX_BATT_VOLT
	}
	return nil
}

func (m *MunicFields) GetMDI_BATT_STATUS() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BATT_STATUS
	}
	return nil
}

func (m *MunicFields) GetMDI_SPEED_BAND_1() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_SPEED_BAND_1
	}
	return nil
}

func (m *MunicFields) GetMDI_SPEED_BAND_2() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_SPEED_BAND_2
	}
	return nil
}

func (m *MunicFields) GetMDI_SPEED_BAND_3() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_SPEED_BAND_3
	}
	return nil
}

func (m *MunicFields) GetMDI_SPEED_BAND_4() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_SPEED_BAND_4
	}
	return nil
}

func (m *MunicFields) GetMDI_SPEED_BAND_5() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_SPEED_BAND_5
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_BAND_1() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_BAND_1
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_BAND_2() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_BAND_2
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_BAND_3() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_BAND_3
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_BAND_4() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_BAND_4
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_BAND_5() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_BAND_5
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_VIN_ALT() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_VIN_ALT
	}
	return nil
}

func (m *MunicFields) GetMDI_DASHBOARD_MILEAGE_METERS() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DASHBOARD_MILEAGE_METERS
	}
	return nil
}

func (m *MunicFields) GetMDI_EXT_BATT_LOW() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_EXT_BATT_LOW
	}
	return nil
}

func (m *MunicFields) GetMDI_EXT_BATT_VOLTAGE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_EXT_BATT_VOLTAGE
	}
	return nil
}

func (m *MunicFields) GetMDI_PANIC_STATE() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_PANIC_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_PANIC_MESSAGE() *munic_type_utils.String {
	if m != nil {
		return m.MDI_PANIC_MESSAGE
	}
	return nil
}

func (m *MunicFields) GetMDI_DTC_MIL() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_DTC_MIL
	}
	return nil
}

func (m *MunicFields) GetMDI_DTC_NUMBER() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DTC_NUMBER
	}
	return nil
}

func (m *MunicFields) GetMDI_DTC_LIST() *munic_type_utils.String {
	if m != nil {
		return m.MDI_DTC_LIST
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_MAX() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_MAX
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_MIN() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_MIN
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_AVERAGE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_AVERAGE
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_OVER() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_RPM_OVER
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_AVERAGE_RANGE_1() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_AVERAGE_RANGE_1
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_AVERAGE_RANGE_2() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_AVERAGE_RANGE_2
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_AVERAGE_RANGE_3() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_AVERAGE_RANGE_3
	}
	return nil
}

func (m *MunicFields) GetMDI_RPM_AVERAGE_RANGE_4() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_RPM_AVERAGE_RANGE_4
	}
	return nil
}

func (m *MunicFields) GetMDI_SENSORS_RECORDER_DATA() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_SENSORS_RECORDER_DATA
	}
	return nil
}

func (m *MunicFields) GetMDI_SENSORS_RECORDER_CALIBRATION() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_SENSORS_RECORDER_CALIBRATION
	}
	return nil
}

func (m *MunicFields) GetMDI_ODO_PARTIAL_METER() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_ODO_PARTIAL_METER
	}
	return nil
}

func (m *MunicFields) GetMDI_ODO_FULL_METER() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_ODO_FULL_METER
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_DEVICE_INDEX() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_DEVICE_INDEX
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_TEMPERATURE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_TEMPERATURE
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_LIGHT_LEVEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_LIGHT_LEVEL
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_HUMIDITY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_HUMIDITY
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_ACCELEROX() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_ACCELEROX
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_ACCELEROY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_ACCELEROY
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_ACCELEROZ() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_ACCELEROZ
	}
	return nil
}

func (m *MunicFields) GetMDI_BT_PIR() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_BT_PIR
	}
	return nil
}

func (m *MunicFields) GetMDI_ZONE_COUNTRY() *munic_type_utils.String {
	if m != nil {
		return m.MDI_ZONE_COUNTRY
	}
	return nil
}

func (m *MunicFields) GetMDI_ZONE_STATE() *munic_type_utils.String {
	if m != nil {
		return m.MDI_ZONE_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_GPS_ANTENNA() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_GPS_ANTENNA
	}
	return nil
}

func (m *MunicFields) GetMDI_DIO_AIN1() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DIO_AIN1
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_WRITEDIR_FREE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_WRITEDIR_FREE
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_OPENED_FDS() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_OPENED_FDS
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_THREADS() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_THREADS
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_LOADAVG15() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_LOADAVG15
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MIN_BATT_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MIN_BATT_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MAX_BATT_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MAX_BATT_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MIN_CASE_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MIN_CASE_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_HEALTH_MAX_CASE_TEMP() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_HEALTH_MAX_CASE_TEMP
	}
	return nil
}

func (m *MunicFields) GetMDI_CAN0_ERROR() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_CAN0_ERROR
	}
	return nil
}

func (m *MunicFields) GetMDI_CAN1_ERROR() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_CAN1_ERROR
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_VIN_HASH() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_VIN_HASH
	}
	return nil
}

func (m *MunicFields) GetMDI_JOURNEY_ID() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_JOURNEY_ID
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PID_1() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_PID_1
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PID_2() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_PID_2
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PID_3() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_PID_3
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PID_4() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_PID_4
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_PID_5() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_PID_5
	}
	return nil
}

func (m *MunicFields) GetMDI_DASHBOARD_MILEAGE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DASHBOARD_MILEAGE
	}
	return nil
}

func (m *MunicFields) GetMDI_DASHBOARD_FUEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DASHBOARD_FUEL
	}
	return nil
}

func (m *MunicFields) GetMDI_DASHBOARD_FUEL_LEVEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DASHBOARD_FUEL_LEVEL
	}
	return nil
}

func (m *MunicFields) GetMDI_DIAG_1() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_DIAG_1
	}
	return nil
}

func (m *MunicFields) GetMDI_DIAG_2() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_DIAG_2
	}
	return nil
}

func (m *MunicFields) GetMDI_DIAG_3() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_DIAG_3
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_SQUISH_VIN() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_SQUISH_VIN
	}
	return nil
}

func (m *MunicFields) GetMDI_PENDING_DTC_LIST() *munic_type_utils.String {
	if m != nil {
		return m.MDI_PENDING_DTC_LIST
	}
	return nil
}

func (m *MunicFields) GetMDI_MAX_RPM_IN_LAST_OVER_RPM() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_MAX_RPM_IN_LAST_OVER_RPM
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_MILEAGE_METERS() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_MILEAGE_METERS
	}
	return nil
}

func (m *MunicFields) GetMDI_IDLE_STATE() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_IDLE_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_VEHICLE_STATE() *munic_type_utils.String {
	if m != nil {
		return m.MDI_VEHICLE_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_SPEED() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_SPEED
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_RPM() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_RPM
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_FUEL() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_FUEL
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_VIN() *munic_type_utils.Bytes {
	if m != nil {
		return m.MDI_OBD_VIN
	}
	return nil
}

func (m *MunicFields) GetMDI_OBD_MILEAGE() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OBD_MILEAGE
	}
	return nil
}

func (m *MunicFields) GetMDI_JOURNEY_TIME() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_JOURNEY_TIME
	}
	return nil
}

func (m *MunicFields) GetMDI_IDLE_JOURNEY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_IDLE_JOURNEY
	}
	return nil
}

func (m *MunicFields) GetMDI_DRIVING_JOURNEY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_DRIVING_JOURNEY
	}
	return nil
}

func (m *MunicFields) GetMDI_MAX_SPEED_IN_LAST_OVERSPEED() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_MAX_SPEED_IN_LAST_OVERSPEED
	}
	return nil
}

func (m *MunicFields) GetMDI_OVERSPEED_COUNTER() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_OVERSPEED_COUNTER
	}
	return nil
}

func (m *MunicFields) GetMDI_TOW_AWAY() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_TOW_AWAY
	}
	return nil
}

func (m *MunicFields) GetMDI_ODO_JOURNEY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_ODO_JOURNEY
	}
	return nil
}

func (m *MunicFields) GetMDI_OVERSPEED() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_OVERSPEED
	}
	return nil
}

func (m *MunicFields) GetMDI_MAX_SPEED_JOURNEY() *munic_type_utils.Integer {
	if m != nil {
		return m.MDI_MAX_SPEED_JOURNEY
	}
	return nil
}

func (m *MunicFields) GetMDI_JOURNEY_STATE() *munic_type_utils.Boolean {
	if m != nil {
		return m.MDI_JOURNEY_STATE
	}
	return nil
}

func (m *MunicFields) GetMDI_RECORD_REASON() *munic_type_utils.String {
	if m != nil {
		return m.MDI_RECORD_REASON
	}
	return nil
}

func init() {
	proto.RegisterType((*MunicFields)(nil), "munic.type.knownFields.MunicFields")
}

func init() { proto.RegisterFile("munic/type/knownFields/municFields.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9b, 0x57, 0x97, 0x1c, 0x37,
	0x76, 0xc7, 0x4f, 0x1f, 0x7b, 0x25, 0x12, 0xcc, 0x25, 0x91, 0x84, 0x48, 0x49, 0xab, 0x95, 0xbd,
	0xb6, 0x1c, 0x34, 0xc3, 0x49, 0x0c, 0x92, 0x2c, 0x09, 0x5d, 0x40, 0x77, 0x83, 0x53, 0x05, 0x14,
	0x51, 0xe8, 0x9e, 0xee, 0x91, 0xe5, 0x32, 0xc3, 0x98, 0x3b, 0xbb, 0xc3, 0x19, 0x99, 0x1c, 0x7a,
	0x25, 0xe7, 0xe3, 0xb8, 0xc7, 0x39, 0xe7, 0xb0, 0x4e, 0xeb, 0x1c, 0xbf, 0x81, 0x73, 0x7c, 0x75,
	0x7e, 0x70, 0xce, 0x39, 0x87, 0xa7, 0x3d, 0x17, 0xa1, 0xaa, 0x7a, 0xa6, 0x47, 0xc0, 0xe8, 0x49,
	0x3a, 0xc3, 0xfb, 0xfb, 0x17, 0x70, 0x01, 0x5c, 0xdc, 0x0b, 0xa0, 0xd1, 0x73, 0xf7, 0x1e, 0x6e,
	0x6f, 0xde, 0x9e, 0xdf, 0x7d, 0xeb, 0x8d, 0x8d, 0xf9, 0x0f, 0x6c, 0xef, 0x7c, 0x70, 0xbb, 0xb7,
	0xb9, 0xb1, 0x75, 0xe7, 0xc1, 0xbc, 0xf9, 0xb3, 0xfd, 0xff, 0xb9, 0x37, 0xee, 0xef, 0xec, 0xee,
	0x24, 0xe7, 0xcc, 0x9f, 0xe6, 0xc0, 0x72, 0xae, 0x65, 0x79, 0xe1, 0xc9, 0x96, 0xc2, 0xc3, 0xdd,
	0xcd, 0xad, 0x07, 0xf3, 0xb7, 0x76, 0xde, 0xdc, 0xb8, 0x63, 0xa9, 0x0b, 0xf8, 0xee, 0xce, 0xce,
	0xdd, 0xad, 0x0d, 0xfb, 0xcf, 0x5b, 0x37, 0x77, 0xb7, 0xb6, 0xef, 0xda, 0x7f, 0x79, 0xf6, 0x23,
	0x0f, 0xd1, 0xb1, 0xbc, 0xf9, 0x4a, 0x32, 0x8f, 0x8e, 0x14, 0xb2, 0xe4, 0x9a, 0x4b, 0x81, 0x3b,
	0xcf, 0x74, 0x9e, 0x3b, 0xb6, 0xf8, 0xd8, 0x9c, 0x85, 0xed, 0x37, 0xb3, 0x9b, 0xbb, 0xd9, 0xf6,
	0x5d, 0x55, 0x1b, 0x25, 0xd7, 0xd0, 0xb1, 0x7e, 0xa1, 0xf2, 0xb4, 0x1a, 0x91, 0x8c, 0x53, 0xfc,
	0x31, 0x86, 0xc1, 0x73, 0xad, 0x66, 0x9a, 0xe6, 0xcc, 0x95, 0xbb, 0xf7, 0x37, 0xb7, 0xef, 0x2a,
	0x64, 0x8c, 0x8d, 0x6d, 0x72, 0x19, 0x1d, 0xed, 0x17, 0x65, 0x55, 0x16, 0x8c, 0x51, 0x7c, 0xc4,
	0x80, 0x4f, 0xec, 0x07, 0xf9, 0xf6, 0xee, 0xc6, 0xdd, 0x8d, 0xfb, 0xea, 0x48, 0xbf, 0x28, 0x8d,
	0x69, 0xb2, 0x88, 0x1e, 0x05, 0x8e, 0x72, 0x85, 0x8f, 0x86, 0xa8, 0x47, 0xfa, 0x45, 0x49, 0xb9,
	0x4a, 0x5e, 0x42, 0xc7, 0x81, 0x21, 0x99, 0xe6, 0x7a, 0x48, 0x19, 0x46, 0x21, 0xf0, 0x58, 0xbf,
	0x28, 0xbd, 0x35, 0xd0, 0x94, 0xcb, 0x8a, 0xf7, 0x85, 0xf5, 0xcc, 0xc9, 0x83, 0xe8, 0xee, 0xce,
	0xce, 0xd6, 0xc6, 0xcd, 0x6d, 0x75, 0x8c, 0x72, 0xe9, 0xad, 0x93, 0xe7, 0xd1, 0xc7, 0x76, 0x89,
	0xd6, 0xf8, 0x54, 0xe8, 0x9b, 0xc6, 0x2c, 0x79, 0xc1, 0x78, 0xb4, 0xac, 0x06, 0x8c, 0x50, 0xa6,
	0xf0, 0xe9, 0x10, 0x05, 0x2e, 0x2d, 0xad, 0x31, 0x7c, 0x4a, 0x95, 0x25, 0xc7, 0x67, 0x82, 0x9f,
	0x02, 0xb3, 0xe4, 0x3a, 0x7a, 0x3c, 0xa7, 0xbc, 0x62, 0x63, 0x5d, 0xc1, 0xa7, 0xab, 0x42, 0xb1,
	0x92, 0x09, 0x8d, 0x93, 0x10, 0x7e, 0x26, 0xa7, 0x9c, 0x8d, 0x35, 0x40, 0x8e, 0x49, 0x5e, 0x43,
	0x4f, 0x69, 0x92, 0x0e, 0x64, 0x5f, 0x91, 0x62, 0x50, 0xf5, 0xb8, 0x2a, 0x75, 0x45, 0x15, 0x1f,
	0x31, 0x55, 0x95, 0x9a, 0x68, 0x86, 0x1f, 0x0b, 0x4c, 0x8d, 0x0b, 0x0d, 0x6e, 0x68, 0x0b, 0x1b,
	0x36, 0x79, 0x3f, 0x7a, 0xef, 0x41, 0xe2, 0xf0, 0x1f, 0x2e, 0xfa, 0xee, 0x23, 0x8f, 0x07, 0x3e,
	0xf2, 0x9e, 0x99, 0x1f, 0x71, 0x1a, 0xf6, 0x5b, 0x02, 0x9d, 0x6d, 0x7d, 0x8b, 0x12, 0x9e, 0x4d,
	0x72, 0xa6, 0x99, 0xc2, 0x67, 0x43, 0x5e, 0x79, 0xbc, 0xe1, 0x1a, 0x2c, 0xb9, 0x8e, 0x1e, 0x6b,
	0xe9, 0x49, 0x2a, 0xad, 0xda, 0xb9, 0x90, 0x5a, 0xd2, 0x50, 0x1e, 0x4a, 0x5e, 0x46, 0x27, 0x25,
	0x95, 0x55, 0x41, 0x94, 0xe6, 0x24, 0xab, 0x56, 0x73, 0x7c, 0x3e, 0xd0, 0xe1, 0xe3, 0x92, 0x4a,
	0x67, 0xbe, 0x9a, 0x27, 0xcb, 0xe8, 0x08, 0xf0, 0xbd, 0x61, 0x96, 0x61, 0x1c, 0x6a, 0xc0, 0xa3,
	0x92, 0x4a, 0xb0, 0x4c, 0x6e, 0xa0, 0xf3, 0x6d, 0x8f, 0x38, 0x87, 0x6b, 0x9e, 0x33, 0xfc, 0x44,
	0x48, 0xa4, 0xe5, 0x4b, 0x07, 0x02, 0x07, 0x6b, 0x1f, 0x56, 0x14, 0xc9, 0x88, 0xca, 0xf1, 0x85,
	0xd0, 0x72, 0x3a, 0x42, 0xb9, 0x34, 0xa6, 0xc9, 0x0a, 0x3a, 0xea, 0xc6, 0x9d, 0x53, 0x7c, 0x31,
	0xd0, 0xf7, 0x23, 0xd6, 0x94, 0xd3, 0xe4, 0x12, 0x7a, 0x44, 0xb3, 0xbc, 0xa8, 0x16, 0xf0, 0x93,
	0xa1, 0x06, 0xbf, 0x0b, 0x0c, 0x17, 0x6a, 0x62, 0x11, 0x3f, 0x15, 0x45, 0x2c, 0xd6, 0xc4, 0x12,
	0x7e, 0x3a, 0x8a, 0x58, 0xaa, 0x89, 0x65, 0xfc, 0xee, 0x28, 0x62, 0xb9, 0x26, 0x56, 0xf0, 0x33,
	0x51, 0xc4, 0x4a, 0x4d, 0x5c, 0xc6, 0xef, 0x89, 0x22, 0x2e, 0xd7, 0xc4, 0x15, 0xfc, 0x6c, 0x14,
	0x71, 0xa5, 0x26, 0xae, 0xe2, 0x8f, 0x8b, 0x22, 0xae, 0xd6, 0xc4, 0x35, 0xfc, 0xf1, 0x51, 0xc4,
	0x35, 0x08, 0xfa, 0x76, 0x04, 0x2f, 0xe1, 0xf7, 0x06, 0x83, 0xbe, 0x19, 0xc2, 0x4b, 0xc9, 0x0a,
	0x42, 0x26, 0x6c, 0x8b, 0x4a, 0x4b, 0x85, 0x3f, 0xc1, 0x60, 0xe7, 0x67, 0xcc, 0xb2, 0xb7, 0x76,
	0x37, 0x1e, 0x98, 0x39, 0xc6, 0x85, 0x96, 0x0a, 0x16, 0x09, 0xec, 0x15, 0x03, 0x2a, 0x0b, 0xfc,
	0x89, 0xc1, 0x45, 0xd2, 0x2f, 0x4a, 0xb0, 0xf4, 0xd4, 0x08, 0xa8, 0xe7, 0x62, 0xa8, 0x51, 0x8b,
	0x2a, 0x80, 0xfa, 0xa4, 0x18, 0x0a, 0x2c, 0x61, 0xf5, 0x98, 0x78, 0x0d, 0xfd, 0xc4, 0x9f, 0x1c,
	0xdc, 0x39, 0xc1, 0x16, 0x4c, 0x81, 0x4b, 0x49, 0xc9, 0x2c, 0xf7, 0x29, 0x41, 0x0e, 0x6c, 0x0d,
	0x27, 0xd0, 0xb9, 0x5c, 0x52, 0x96, 0x57, 0x82, 0xe9, 0x35, 0xa9, 0x56, 0x2b, 0x59, 0x30, 0x45,
	0xc0, 0xa9, 0x9f, 0x1a, 0x58, 0x82, 0x8f, 0x1b, 0xce, 0x61, 0x9e, 0x4a, 0x24, 0x3a, 0x27, 0xbb,
	0xb4, 0x4a, 0xa5, 0x10, 0x2c, 0xd5, 0x8c, 0x56, 0x85, 0x92, 0x5a, 0xa6, 0x32, 0xc3, 0xcf, 0x07,
	0x63, 0xac, 0xec, 0xd2, 0x9a, 0xf3, 0x58, 0x52, 0xa0, 0xf3, 0x66, 0x7b, 0x1f, 0x31, 0x45, 0xfa,
	0xcc, 0xb8, 0xd3, 0x6c, 0x08, 0xc3, 0x12, 0xcf, 0x05, 0x15, 0x61, 0xa7, 0xb7, 0x20, 0x70, 0x16,
	0x4b, 0xd6, 0xd0, 0x45, 0xd8, 0x1a, 0x33, 0x52, 0x6a, 0x9b, 0xda, 0x54, 0xf0, 0x81, 0x8c, 0xb8,
	0xfc, 0x61, 0x3e, 0xa4, 0x7a, 0x3e, 0xa7, 0x1c, 0x60, 0xc3, 0xf6, 0x8b, 0xd2, 0x93, 0xc9, 0x04,
	0x3d, 0x39, 0x4b, 0x58, 0x8a, 0xbe, 0x55, 0xbe, 0x14, 0x52, 0xc6, 0x7b, 0x95, 0x3d, 0x9a, 0x74,
	0xd1, 0xe9, 0x5e, 0x5e, 0x56, 0xbd, 0x21, 0xcb, 0xaa, 0x8c, 0x8d, 0x58, 0x56, 0x2d, 0xe2, 0xc5,
	0x90, 0xdc, 0x89, 0x5e, 0x5e, 0x02, 0x61, 0x80, 0xc5, 0xe4, 0x06, 0x02, 0xfd, 0x0a, 0x86, 0xa7,
	0xa5, 0xa3, 0x88, 0xe6, 0x12, 0x2f, 0x05, 0x5d, 0x99, 0x53, 0x2e, 0xbb, 0xb4, 0x96, 0x33, 0x58,
	0x32, 0x44, 0x17, 0x0e, 0xda, 0xbc, 0x39, 0xc5, 0xcb, 0x81, 0x19, 0x74, 0x7e, 0xe6, 0x8e, 0xcd,
	0x29, 0x6c, 0x05, 0x44, 0x31, 0x52, 0x65, 0xbc, 0xd4, 0x78, 0x25, 0xb4, 0x15, 0x80, 0x29, 0x58,
	0x26, 0x19, 0x6a, 0x6d, 0xd3, 0x66, 0x13, 0x2b, 0x35, 0xc9, 0x0b, 0x7c, 0x39, 0xd4, 0xb9, 0xd6,
	0x2e, 0x5e, 0x53, 0x09, 0x45, 0x67, 0x60, 0xf8, 0x7a, 0x7c, 0xcc, 0x68, 0x55, 0x12, 0x5d, 0x89,
	0x61, 0x8e, 0xaf, 0x84, 0xa4, 0x4e, 0xf6, 0x8b, 0xd2, 0x20, 0x25, 0xd1, 0x62, 0x98, 0xc3, 0xba,
	0xcc, 0x47, 0xda, 0xa5, 0x30, 0x57, 0x83, 0xbb, 0x61, 0x3e, 0xd2, 0x36, 0x55, 0xb9, 0x86, 0x8e,
	0x75, 0xa5, 0xd4, 0x95, 0x62, 0xa4, 0x94, 0x02, 0x5f, 0x0b, 0x25, 0xdf, 0x60, 0x6c, 0x6d, 0x61,
	0x9c, 0xcb, 0xc1, 0x50, 0x53, 0xb9, 0x26, 0x2a, 0x3d, 0x29, 0x58, 0x45, 0x04, 0xf5, 0x3a, 0x2f,
	0x04, 0x74, 0xce, 0x7a, 0x12, 0x40, 0x22, 0xa8, 0x93, 0xf4, 0x51, 0x69, 0x24, 0x33, 0x8d, 0x5f,
	0x8c, 0x8a, 0x4a, 0x60, 0x0a, 0x9c, 0x1e, 0x57, 0xab, 0xdd, 0x89, 0x66, 0x25, 0x7e, 0x29, 0xc8,
	0xe9, 0xb1, 0x35, 0x05, 0x4e, 0xd5, 0xdc, 0xa7, 0x05, 0x39, 0xe5, 0xb9, 0x17, 0xd0, 0x31, 0xd3,
	0xce, 0x35, 0xa2, 0xf2, 0x61, 0x81, 0x5f, 0x0e, 0x26, 0xd8, 0x60, 0x6d, 0x8d, 0x93, 0x97, 0xd1,
	0x09, 0xc3, 0xa6, 0x03, 0xa2, 0xfa, 0x5c, 0xf4, 0xf1, 0x2b, 0xa1, 0xd1, 0x3a, 0x0e, 0xf6, 0xde,
	0x3c, 0x79, 0x1d, 0x3d, 0xdd, 0x9a, 0x7d, 0x25, 0x4b, 0xa5, 0xa0, 0xd3, 0x69, 0xf2, 0xab, 0x01,
	0xe7, 0x5f, 0x6c, 0x78, 0x8b, 0xb7, 0xf3, 0xe4, 0x35, 0x74, 0xf1, 0x40, 0x79, 0x4e, 0x31, 0x09,
	0x68, 0xe3, 0xd9, 0xda, 0x9c, 0x26, 0xaf, 0xa0, 0x93, 0x2d, 0xe1, 0x91, 0x12, 0xb8, 0x1b, 0xd0,
	0x3a, 0xd1, 0xd8, 0x8f, 0x94, 0x80, 0xcc, 0xb5, 0x2d, 0xc0, 0x05, 0x4e, 0xdf, 0x7e, 0x3f, 0x6e,
	0xf3, 0x5c, 0x24, 0x57, 0x10, 0xd4, 0x54, 0x95, 0x1c, 0x6a, 0xb3, 0x99, 0xd3, 0xb7, 0x87, 0x21,
	0xb9, 0x94, 0x43, 0x0d, 0x7b, 0xcd, 0x00, 0x25, 0x8a, 0x65, 0x64, 0x92, 0x4a, 0xa1, 0x95, 0xcc,
	0x9c, 0x97, 0x59, 0x68, 0xd8, 0xce, 0xb4, 0x21, 0xeb, 0xdc, 0x57, 0xd1, 0x29, 0xbb, 0x0b, 0x96,
	0x3c, 0xaf, 0x78, 0x9a, 0x72, 0x8a, 0x7b, 0x21, 0x27, 0x18, 0xa0, 0xe4, 0xb9, 0x31, 0x07, 0x27,
	0xb4, 0x14, 0xf2, 0x92, 0xe3, 0x7e, 0x28, 0x7d, 0xaf, 0x05, 0xf2, 0x92, 0x27, 0x29, 0x3a, 0x5d,
	0x32, 0x05, 0x99, 0x7f, 0x51, 0x14, 0xae, 0x27, 0x83, 0x60, 0xb0, 0xb1, 0x48, 0x51, 0x14, 0xb6,
	0x1b, 0x3d, 0x94, 0xec, 0x8f, 0xf0, 0x98, 0x87, 0x64, 0x4e, 0xed, 0x89, 0xed, 0xc9, 0x00, 0x3d,
	0xe6, 0x75, 0x98, 0xe8, 0x73, 0xc1, 0xaa, 0x4c, 0x12, 0x8a, 0xaf, 0x87, 0x84, 0x4e, 0x5b, 0x21,
	0xcb, 0x00, 0x92, 0x64, 0xe8, 0xec, 0x54, 0x8b, 0xa0, 0xa4, 0x2c, 0x87, 0x8a, 0xe1, 0xd5, 0x60,
	0x8d, 0xd4, 0x34, 0xca, 0x43, 0x89, 0x46, 0x4f, 0x78, 0x35, 0x3d, 0x50, 0x52, 0xeb, 0x8c, 0x55,
	0xf5, 0x99, 0x46, 0x16, 0x52, 0x3c, 0x67, 0x15, 0x3d, 0x59, 0x9f, 0x73, 0x48, 0x74, 0x7e, 0x4f,
	0x6f, 0x25, 0xcf, 0x6c, 0x22, 0x95, 0x07, 0x77, 0x8e, 0x76, 0x8f, 0x25, 0xcf, 0x4c, 0x4e, 0xf5,
	0x1a, 0x7a, 0xaa, 0x6e, 0xa6, 0x22, 0xa2, 0xcc, 0x79, 0x59, 0x72, 0x29, 0x1a, 0x59, 0x11, 0x92,
	0x7d, 0xc2, 0x35, 0xb5, 0x45, 0x7b, 0x71, 0x97, 0xbd, 0xec, 0x69, 0x6d, 0xed, 0x57, 0x19, 0x93,
	0xbd, 0xb4, 0x5b, 0x5c, 0x3b, 0x17, 0x32, 0x41, 0x27, 0x9c, 0xaa, 0x21, 0x2f, 0x59, 0xe5, 0x96,
	0x08, 0x2e, 0x42, 0x2b, 0xca, 0x79, 0xc1, 0x62, 0x8e, 0x4a, 0x46, 0x4d, 0x43, 0xcd, 0xec, 0xac,
	0xd6, 0x88, 0x86, 0x58, 0x25, 0xcc, 0x4c, 0xc0, 0x37, 0x42, 0xa2, 0x6e, 0xb8, 0x0c, 0x6b, 0x50,
	0x2e, 0x00, 0xf4, 0x59, 0x56, 0xcb, 0x01, 0xa9, 0x94, 0x19, 0x11, 0xda, 0x4d, 0x77, 0x15, 0x93,
	0x65, 0xd5, 0x1e, 0x70, 0xac, 0x9d, 0xf7, 0xfb, 0x7d, 0xeb, 0xa5, 0xcd, 0xb0, 0x95, 0x87, 0xf2,
	0xad, 0x43, 0xcd, 0xa0, 0x55, 0xe8, 0xdd, 0x07, 0x08, 0xd7, 0x03, 0xa7, 0x43, 0xe2, 0x17, 0x67,
	0x88, 0xd7, 0x83, 0xf7, 0x3a, 0x7a, 0x7a, 0x6a, 0x9d, 0x51, 0x96, 0x41, 0x78, 0x9f, 0x34, 0xfa,
	0xc3, 0x90, 0xfe, 0x85, 0x66, 0xc1, 0x79, 0xba, 0x96, 0x6f, 0xf9, 0xbc, 0x20, 0x6a, 0x95, 0x8b,
	0x7e, 0xd5, 0x55, 0x64, 0x95, 0x55, 0xe5, 0x1a, 0xd7, 0xe9, 0x00, 0x8f, 0x42, 0x83, 0xe9, 0x7c,
	0xee, 0x60, 0xc3, 0x5a, 0x14, 0x62, 0x56, 0x53, 0x2c, 0x74, 0x25, 0x51, 0x14, 0xb6, 0xb3, 0xb5,
	0x40, 0xf0, 0x3c, 0x5d, 0x33, 0x06, 0xe1, 0x14, 0x62, 0x16, 0x64, 0xc8, 0x5a, 0x6a, 0x92, 0x55,
	0xc3, 0x92, 0x59, 0x47, 0xe0, 0x71, 0x30, 0x66, 0xf5, 0xf2, 0xd2, 0x40, 0xc0, 0x98, 0x09, 0xf6,
	0x0a, 0x3a, 0x39, 0x9d, 0x6b, 0xe3, 0x49, 0x48, 0xe4, 0x78, 0x3b, 0xd3, 0x4e, 0x18, 0x3a, 0x03,
	0x02, 0x64, 0x9c, 0x41, 0xe0, 0x4c, 0x89, 0x09, 0x4f, 0xeb, 0xc1, 0x28, 0xdc, 0xcb, 0x4b, 0x40,
	0x3c, 0x91, 0x10, 0x74, 0xaa, 0x96, 0x59, 0x63, 0xbc, 0x3f, 0xd0, 0xf8, 0xb5, 0x98, 0x94, 0x1f,
	0x00, 0x6b, 0x0f, 0xbb, 0x0a, 0x48, 0xb8, 0x39, 0x37, 0x90, 0x43, 0x55, 0xe2, 0x4f, 0x0f, 0xee,
	0x2a, 0xbd, 0xbc, 0xb4, 0x84, 0x01, 0x60, 0x6b, 0x03, 0x91, 0x11, 0x1b, 0xf0, 0x34, 0x63, 0x30,
	0x3a, 0xaf, 0x87, 0xb6, 0xb6, 0x5e, 0x5e, 0x3a, 0x73, 0x4e, 0x61, 0x73, 0x05, 0xbe, 0x94, 0x3d,
	0x48, 0xb5, 0x8c, 0xc0, 0x67, 0x84, 0x36, 0xd7, 0x5e, 0x5e, 0x7a, 0x7b, 0x4e, 0x93, 0x3e, 0x4a,
	0x9a, 0xb1, 0xa5, 0xbc, 0xd4, 0x44, 0xa4, 0x0c, 0x57, 0xd1, 0x43, 0xeb, 0x11, 0xef, 0x0f, 0xc1,
	0xc6, 0xba, 0x2a, 0x99, 0x1a, 0xf1, 0x94, 0xe1, 0xcf, 0x8c, 0xf1, 0x07, 0x10, 0x0e, 0x80, 0x8a,
	0xb4, 0xe5, 0xd4, 0xa9, 0x08, 0x71, 0x33, 0x58, 0x46, 0xd5, 0xbe, 0x6d, 0x87, 0x07, 0x37, 0xd2,
	0x5c, 0xf4, 0xa4, 0xca, 0xed, 0x74, 0xb9, 0x15, 0xf0, 0x10, 0x34, 0xaa, 0x65, 0x9f, 0x2c, 0xa1,
	0x23, 0xf5, 0xe2, 0xb9, 0x1d, 0x60, 0x1f, 0xf5, 0x6b, 0x06, 0xd2, 0x7a, 0x36, 0x20, 0x23, 0x33,
	0x26, 0x77, 0xc2, 0x69, 0xbd, 0xb1, 0xe5, 0xd4, 0xa4, 0xd9, 0x96, 0x83, 0x0a, 0x15, 0x6f, 0x84,
	0xd3, 0x6c, 0x63, 0x0d, 0xc6, 0xc9, 0x55, 0x84, 0x3c, 0x4b, 0x34, 0xfe, 0xac, 0x10, 0xea, 0x1a,
	0x98, 0x11, 0x0d, 0x91, 0xc2, 0x91, 0x94, 0x4c, 0x2a, 0xd9, 0xab, 0x26, 0x8c, 0x28, 0x7c, 0x37,
	0xb8, 0xae, 0x2c, 0x44, 0xc9, 0x44, 0xf6, 0x80, 0x68, 0xe9, 0x40, 0xb1, 0x07, 0x42, 0x94, 0x4c,
	0xf0, 0xfb, 0x22, 0x75, 0x80, 0x91, 0x3d, 0x4a, 0x26, 0xb0, 0x61, 0x3a, 0x9d, 0xfa, 0xae, 0xa3,
	0xea, 0xb2, 0x3e, 0x17, 0x78, 0x33, 0x98, 0x36, 0x58, 0xd0, 0xdf, 0x7b, 0x18, 0x0a, 0x72, 0xa5,
	0x7d, 0x7a, 0x05, 0x23, 0xab, 0xf8, 0xfd, 0xc1, 0x5c, 0x69, 0x5a, 0x0e, 0xa0, 0xe4, 0x3a, 0x7a,
	0x7c, 0x9f, 0x1a, 0x13, 0x14, 0x7f, 0x20, 0x78, 0x01, 0x30, 0x2d, 0xc6, 0x04, 0x4d, 0x14, 0xc2,
	0x2d, 0xad, 0x01, 0x23, 0xd4, 0xec, 0x00, 0xa6, 0xaf, 0x5b, 0xc1, 0x63, 0xe2, 0x5a, 0xcf, 0x81,
	0xb6, 0xb7, 0x05, 0x3a, 0x3f, 0x43, 0xd3, 0xf4, 0xf7, 0x5e, 0x70, 0x15, 0xed, 0x95, 0x34, 0x3d,
	0x9e, 0x1e, 0x0f, 0xaf, 0x08, 0x7d, 0xde, 0x8e, 0x1f, 0x0f, 0x87, 0x41, 0xaf, 0x9b, 0x79, 0x42,
	0xd2, 0xb4, 0x1a, 0xbb, 0xfe, 0xee, 0x44, 0xce, 0x13, 0x92, 0xa6, 0x63, 0xdb, 0x53, 0x8a, 0xce,
	0x4c, 0xe9, 0x98, 0x3e, 0xbe, 0x11, 0x8c, 0x3a, 0x8d, 0x8c, 0xe9, 0x5d, 0x17, 0x9d, 0x9e, 0x52,
	0x81, 0x7e, 0x7d, 0x76, 0x70, 0x3b, 0x68, 0x44, 0xf6, 0xf7, 0x68, 0xe2, 0x7a, 0x74, 0x3f, 0xbe,
	0x47, 0x93, 0x59, 0x3d, 0x9a, 0xd8, 0x1e, 0x3d, 0x88, 0xef, 0xd1, 0x64, 0x46, 0x8f, 0x26, 0xa6,
	0x47, 0xbb, 0xf1, 0x3d, 0x9a, 0xec, 0xef, 0xd1, 0xba, 0xeb, 0xd1, 0xc3, 0xf8, 0x1e, 0xad, 0xcf,
	0xea, 0xd1, 0xba, 0xed, 0xd1, 0xe7, 0xc4, 0xf7, 0x68, 0x7d, 0x46, 0x8f, 0xd6, 0x4d, 0x8f, 0x3e,
	0x18, 0xdf, 0xa3, 0x75, 0xe8, 0xd1, 0xab, 0xc8, 0xa9, 0x56, 0x2c, 0x23, 0x45, 0xc9, 0x28, 0x7e,
	0x33, 0x52, 0xc1, 0xd9, 0xc3, 0x26, 0xe7, 0x14, 0x86, 0x82, 0xdf, 0x18, 0x9a, 0xe0, 0xfe, 0x56,
	0x64, 0x57, 0x2c, 0xc1, 0xa9, 0x2f, 0x25, 0x53, 0x45, 0xca, 0x41, 0x45, 0x99, 0x36, 0xb9, 0x16,
	0xfe, 0xdc, 0x50, 0x5a, 0x96, 0x53, 0x6e, 0x10, 0x4f, 0x24, 0x1b, 0xe8, 0x59, 0x9f, 0x39, 0xda,
	0x8c, 0x91, 0x14, 0x45, 0xc6, 0x6d, 0x86, 0xd3, 0x24, 0xa7, 0x9f, 0x17, 0x6a, 0xde, 0xd3, 0x36,
	0x7f, 0x34, 0x12, 0x2d, 0x85, 0x3a, 0x41, 0x1d, 0xa2, 0x0b, 0xd3, 0x9f, 0x29, 0x18, 0x25, 0x99,
	0x3f, 0x28, 0xfe, 0xfc, 0xc8, 0x5a, 0xc3, 0xa0, 0x86, 0x74, 0x47, 0xc5, 0xac, 0x29, 0xa8, 0x4b,
	0x4d, 0xd2, 0xd5, 0x4a, 0x90, 0x9c, 0xe1, 0x2f, 0x08, 0x78, 0xe1, 0x54, 0x5d, 0xb9, 0xa4, 0xab,
	0x00, 0x40, 0xfc, 0x34, 0x87, 0xc2, 0x29, 0xc9, 0x78, 0x17, 0xe6, 0x06, 0xcb, 0x98, 0x92, 0xf6,
	0x9a, 0xed, 0x0b, 0x83, 0xf1, 0x13, 0x50, 0x43, 0x7a, 0xd0, 0x5c, 0xb3, 0xcd, 0xa1, 0x77, 0xb1,
	0x11, 0x13, 0x1a, 0x7f, 0x51, 0xa0, 0x35, 0xd6, 0x2c, 0x59, 0x6f, 0x52, 0xf8, 0xb6, 0x87, 0xea,
	0xf2, 0xf9, 0x8b, 0x3b, 0x91, 0x75, 0x53, 0xe3, 0xa4, 0xba, 0x82, 0xbe, 0x82, 0x8e, 0xe6, 0xa4,
	0x2f, 0x98, 0x96, 0xd5, 0x18, 0x7f, 0x49, 0x50, 0xe8, 0x88, 0x33, 0x1e, 0xb7, 0xc1, 0x09, 0xfe,
	0xd2, 0x68, 0x70, 0xd2, 0x06, 0xd7, 0xf1, 0x97, 0x45, 0x83, 0xeb, 0x49, 0x8a, 0x4e, 0x79, 0xd0,
	0x85, 0x7a, 0xfc, 0xe5, 0x41, 0xfc, 0xa4, 0x43, 0x1c, 0x01, 0xe3, 0x09, 0xbe, 0x1c, 0x30, 0x92,
	0xe9, 0x41, 0x95, 0x73, 0x51, 0x35, 0xa7, 0xa3, 0x5f, 0xd1, 0x89, 0x39, 0x4a, 0xb7, 0x68, 0xce,
	0x45, 0x7d, 0x54, 0xba, 0x47, 0x93, 0x8c, 0x5b, 0x9a, 0x5f, 0x79, 0x18, 0x4d, 0x32, 0xae, 0x35,
	0xbb, 0x08, 0xa6, 0xa2, 0x15, 0x72, 0x4b, 0xe1, 0x43, 0x41, 0xa9, 0x13, 0x39, 0xe5, 0x40, 0xb8,
	0x25, 0x90, 0x22, 0x58, 0xd4, 0x3e, 0xbd, 0x21, 0x82, 0x56, 0x0b, 0xf8, 0xab, 0xa2, 0x44, 0x6c,
	0x6a, 0x43, 0x04, 0x5d, 0x98, 0x21, 0xb2, 0x88, 0xbf, 0xfa, 0x70, 0x22, 0x8b, 0x33, 0x44, 0x96,
	0xf0, 0xd7, 0x1c, 0x4e, 0x64, 0x69, 0x86, 0xc8, 0x32, 0xfe, 0xda, 0xc3, 0x89, 0x2c, 0xcf, 0x10,
	0x59, 0xc1, 0x5f, 0x77, 0x38, 0x91, 0x15, 0x28, 0x33, 0x41, 0x44, 0x15, 0xb9, 0x77, 0xeb, 0xd7,
	0x07, 0x25, 0x8e, 0xe5, 0x94, 0xab, 0x22, 0xb7, 0x4e, 0xdd, 0x2b, 0xb0, 0x88, 0xbf, 0xe1, 0x30,
	0x02, 0x8b, 0xfb, 0x04, 0x96, 0xf0, 0x37, 0x1e, 0x46, 0x60, 0x69, 0x9f, 0xc0, 0x32, 0xfe, 0xa6,
	0xc3, 0x08, 0x2c, 0xef, 0x13, 0x58, 0xc1, 0xdf, 0x7c, 0x18, 0x01, 0x70, 0xe2, 0x29, 0x1f, 0xd5,
	0x46, 0x5c, 0x54, 0x24, 0xd3, 0xf8, 0x5b, 0x3a, 0x6f, 0x7f, 0x80, 0x7c, 0xdc, 0x86, 0xb1, 0x11,
	0x17, 0x24, 0xd3, 0xc9, 0x6b, 0x36, 0x2c, 0x52, 0x52, 0x0e, 0x6c, 0xfd, 0x94, 0xf3, 0x8c, 0x91,
	0x3e, 0xab, 0xcc, 0xab, 0x8c, 0x12, 0x7f, 0x6b, 0x27, 0xe6, 0xac, 0xae, 0xc6, 0x1d, 0x6d, 0x61,
	0x3f, 0x4f, 0xea, 0x47, 0x38, 0x99, 0x5c, 0xc3, 0xdf, 0xd6, 0x09, 0x6d, 0x46, 0x27, 0x9a, 0x17,
	0x38, 0x99, 0x5c, 0x4b, 0x56, 0xf7, 0xbc, 0xe4, 0x81, 0x95, 0x4d, 0xfa, 0x0c, 0x7f, 0x7b, 0xe7,
	0x10, 0x4f, 0x79, 0x1c, 0xe4, 0x23, 0x42, 0x41, 0x04, 0x4f, 0xdd, 0x29, 0xf3, 0x77, 0x44, 0x35,
	0xc8, 0x10, 0xf6, 0x94, 0x99, 0xa1, 0x33, 0x8d, 0x46, 0xce, 0xca, 0x12, 0x5a, 0xf3, 0x9d, 0x9d,
	0x88, 0x4d, 0xd1, 0x20, 0x8e, 0x80, 0x22, 0xd2, 0x78, 0x5e, 0xa7, 0xe0, 0x73, 0xfc, 0x5d, 0xc1,
	0x66, 0x1c, 0x05, 0x47, 0xeb, 0x34, 0xe7, 0x19, 0x24, 0x49, 0x9e, 0x15, 0xc3, 0xbc, 0xcb, 0x14,
	0xfe, 0xee, 0xa0, 0x37, 0x8e, 0x5b, 0xdc, 0xda, 0x27, 0x2f, 0xa2, 0xe3, 0x5e, 0xc1, 0xdc, 0x32,
	0x7e, 0x4f, 0xa8, 0xfd, 0xc8, 0xe2, 0xe6, 0xa2, 0xd1, 0x35, 0x1d, 0xa6, 0x6d, 0x4e, 0xc6, 0xf8,
	0x7b, 0x83, 0xdf, 0x3e, 0x6a, 0xe7, 0x6c, 0x4e, 0xc6, 0x53, 0x2c, 0x17, 0xf8, 0xfb, 0xa2, 0x59,
	0x2e, 0xfc, 0xe8, 0x01, 0xeb, 0xae, 0xb5, 0xf1, 0xf7, 0x47, 0x85, 0x1d, 0x55, 0xe4, 0x0e, 0x48,
	0x5e, 0xb2, 0x1d, 0x07, 0x0d, 0x39, 0x62, 0x0a, 0x7f, 0x38, 0xe8, 0x77, 0x64, 0x05, 0xc0, 0x1a,
	0xaa, 0xb6, 0x3d, 0x2d, 0xa8, 0x14, 0x11, 0x7d, 0x56, 0x2d, 0xe0, 0x1f, 0xe8, 0xc4, 0x1c, 0x96,
	0x37, 0x2d, 0x31, 0xdc, 0xc2, 0xc1, 0x8a, 0x8b, 0xf8, 0x07, 0xdf, 0x89, 0xe2, 0xe2, 0xc1, 0x8a,
	0x4b, 0xf8, 0x87, 0xde, 0x89, 0xe2, 0xd2, 0xc1, 0x8a, 0xcb, 0xf8, 0x87, 0xdf, 0x89, 0xe2, 0x72,
	0x52, 0xda, 0x9b, 0x8c, 0x92, 0x89, 0x52, 0xaa, 0xb2, 0x52, 0x2c, 0x95, 0x8a, 0x32, 0x55, 0x51,
	0xa2, 0x09, 0xfe, 0x91, 0x40, 0x04, 0x83, 0x6c, 0xd5, 0x91, 0x1e, 0x04, 0x2e, 0xb9, 0x89, 0x9e,
	0x99, 0x29, 0x6a, 0x92, 0x47, 0x65, 0xcf, 0x95, 0x3e, 0x12, 0xd0, 0x7e, 0x6a, 0xbf, 0x76, 0x0b,
	0x4f, 0x72, 0x77, 0x9f, 0xd3, 0x7a, 0xa9, 0x66, 0xdf, 0xbc, 0xfd, 0x68, 0x27, 0xea, 0x42, 0xa7,
	0x7e, 0xb1, 0x66, 0x1f, 0xbd, 0xf5, 0x5d, 0x7e, 0xed, 0x1e, 0xae, 0x39, 0xad, 0x1f, 0xeb, 0x44,
	0xdd, 0x58, 0xd9, 0x27, 0x6c, 0x56, 0x88, 0xdb, 0x1b, 0xab, 0xae, 0xae, 0x28, 0x1b, 0xf1, 0x94,
	0x55, 0x5c, 0x50, 0x36, 0xc6, 0x3f, 0xde, 0x89, 0xb9, 0xb2, 0xea, 0x6a, 0x0b, 0x19, 0x26, 0x19,
	0xd8, 0x36, 0x75, 0xed, 0x91, 0x1e, 0x53, 0x44, 0x43, 0x85, 0xf2, 0x13, 0x91, 0x4a, 0x2d, 0xc6,
	0xf7, 0xae, 0xab, 0xab, 0x8c, 0xf7, 0x07, 0xfe, 0x7e, 0xe2, 0x27, 0xa3, 0x7a, 0xd7, 0xd5, 0x86,
	0xb1, 0x07, 0xca, 0x3e, 0x8f, 0xd3, 0xd5, 0x60, 0x98, 0x73, 0xca, 0xf5, 0x04, 0xff, 0x54, 0x5c,
	0x1e, 0xa7, 0x3d, 0x90, 0x50, 0xbb, 0x17, 0x75, 0x75, 0x5d, 0x7f, 0x8c, 0xf1, 0x4f, 0x47, 0x64,
	0xbe, 0x20, 0x52, 0x13, 0x33, 0x54, 0x26, 0xf8, 0x67, 0x0e, 0xa9, 0x32, 0xab, 0x2d, 0xeb, 0xf8,
	0x67, 0x0f, 0xa9, 0xb2, 0x9e, 0x5c, 0x45, 0xc8, 0xa9, 0x14, 0x5c, 0xe1, 0x9f, 0x8b, 0x28, 0x02,
	0x80, 0x2f, 0xb8, 0xf2, 0xfb, 0xf2, 0xba, 0x34, 0xe7, 0xb7, 0x43, 0xa1, 0xd5, 0x04, 0xff, 0x7c,
	0x68, 0x03, 0x80, 0xcf, 0x03, 0xe1, 0x00, 0x9f, 0xbb, 0x18, 0x11, 0xbb, 0x93, 0xfe, 0x42, 0x27,
	0x78, 0xe5, 0x6b, 0x25, 0xec, 0x3e, 0xea, 0x46, 0xd5, 0xbc, 0x6e, 0x12, 0x9a, 0x09, 0x41, 0xf0,
	0x2f, 0x46, 0xed, 0xc5, 0xfd, 0xa2, 0x74, 0x80, 0x8f, 0xe6, 0xe6, 0xc1, 0x25, 0x17, 0x0b, 0xf8,
	0x97, 0x82, 0x5e, 0x30, 0xfb, 0x18, 0x97, 0x60, 0x9d, 0x94, 0x53, 0x35, 0xc7, 0x9a, 0xe2, 0x9a,
	0x51, 0xae, 0xaa, 0x9e, 0x62, 0x0c, 0xff, 0x72, 0x50, 0xe9, 0x6c, 0x5d, 0x73, 0x78, 0x12, 0x40,
	0x1f, 0x22, 0x9c, 0xa8, 0x2c, 0x98, 0x60, 0xb4, 0xea, 0xd1, 0x12, 0xff, 0x4a, 0x54, 0x88, 0xb0,
	0x9c, 0xc5, 0x7a, 0xb4, 0xf4, 0xcb, 0xd1, 0xc9, 0xe9, 0x81, 0x62, 0x84, 0x96, 0xf8, 0x57, 0xa3,
	0x96, 0xa3, 0x85, 0x1c, 0x93, 0x64, 0x36, 0x91, 0x72, 0x4a, 0x99, 0x24, 0x94, 0x8c, 0xfa, 0x0b,
	0x2b, 0xf8, 0xd7, 0x0e, 0xd1, 0xae, 0x9a, 0x3a, 0xa8, 0x06, 0x34, 0xd7, 0x00, 0xbf, 0x7e, 0xf8,
	0x1a, 0xd0, 0xdc, 0x03, 0x1c, 0x50, 0x03, 0x1a, 0xcd, 0xdf, 0x38, 0x7c, 0x0d, 0x38, 0x4b, 0x93,
	0x8b, 0xaa, 0x79, 0x27, 0xf8, 0x9b, 0x87, 0x6b, 0x67, 0xfd, 0x68, 0x70, 0x7f, 0x3b, 0x1b, 0xcd,
	0xdf, 0x3a, 0x5c, 0x3b, 0x6b, 0x4d, 0x97, 0xd2, 0xa5, 0x44, 0x5c, 0xaa, 0x98, 0x52, 0x52, 0xe1,
	0xdf, 0x8e, 0x4a, 0xe9, 0x00, 0x30, 0xf6, 0x2d, 0x85, 0x05, 0xa7, 0xf0, 0x3b, 0xb1, 0x0a, 0x0b,
	0x56, 0x81, 0xd8, 0xb8, 0xe0, 0xab, 0x89, 0x01, 0x29, 0x07, 0xf8, 0x77, 0x03, 0x1b, 0xe6, 0x89,
	0xba, 0x9c, 0x00, 0x73, 0xdf, 0x88, 0xeb, 0x72, 0xa8, 0x04, 0x9b, 0x54, 0x9c, 0xe2, 0xdf, 0x8b,
	0x6a, 0x84, 0x03, 0x38, 0x4d, 0x5e, 0x44, 0x27, 0xea, 0xbb, 0x56, 0x0e, 0x65, 0xe1, 0xef, 0x07,
	0x5a, 0x80, 0xdc, 0xdd, 0x2a, 0xa7, 0x0b, 0x7b, 0xe1, 0x45, 0xfc, 0x07, 0xd1, 0xf0, 0xe2, 0x5e,
	0x78, 0x09, 0xff, 0x61, 0x34, 0xbc, 0xb4, 0x17, 0x5e, 0xc6, 0x7f, 0x14, 0x0d, 0x2f, 0xef, 0x85,
	0x57, 0xf0, 0x1f, 0x47, 0xc3, 0x2b, 0x89, 0xb0, 0x01, 0x67, 0x5f, 0x09, 0x87, 0xff, 0x24, 0x2a,
	0x37, 0xdb, 0x5b, 0xbb, 0xf9, 0x88, 0xd3, 0xe8, 0x99, 0x8b, 0xe4, 0x3f, 0x8d, 0x8a, 0x38, 0x35,
	0x64, 0x6e, 0x92, 0x5d, 0x7c, 0x9d, 0x56, 0x72, 0x69, 0xc0, 0x9f, 0x45, 0xc5, 0xd7, 0x29, 0x3d,
	0x9b, 0x0c, 0x5c, 0xb6, 0xdb, 0x1e, 0xe5, 0xa4, 0x5f, 0x2d, 0xe0, 0x3f, 0x0f, 0x38, 0xea, 0x88,
	0x09, 0xf7, 0xa4, 0xbf, 0x30, 0xc5, 0x2d, 0xe2, 0xbf, 0x88, 0xe4, 0x16, 0xa7, 0xb8, 0x25, 0xfc,
	0x97, 0x91, 0xdc, 0xd2, 0xd4, 0xd9, 0xe9, 0x8d, 0x21, 0x2f, 0xed, 0xd3, 0xb0, 0xbf, 0x0a, 0xf0,
	0xfe, 0xec, 0xd4, 0x10, 0x23, 0x2e, 0xfc, 0x0f, 0x59, 0x0a, 0x26, 0xcc, 0x75, 0x4e, 0x5d, 0xb0,
	0xfd, 0x75, 0x68, 0xb3, 0x85, 0x22, 0xd5, 0x51, 0xbe, 0x6e, 0x1b, 0xdb, 0x62, 0x1f, 0x02, 0x16,
	0xe4, 0xf2, 0x5c, 0xd8, 0xb7, 0xba, 0x50, 0xd9, 0xc0, 0x1f, 0xf0, 0xdf, 0x74, 0x62, 0xde, 0x10,
	0xe5, 0x64, 0xac, 0x8a, 0x9c, 0x0b, 0x60, 0x01, 0x55, 0x45, 0x9e, 0xc8, 0xe6, 0xf1, 0xcc, 0x9e,
	0x03, 0x84, 0xbf, 0xed, 0x44, 0xbe, 0x21, 0x9a, 0x3e, 0x3a, 0x70, 0x71, 0x84, 0xd3, 0xcc, 0x67,
	0x17, 0x7f, 0x17, 0xcc, 0x0d, 0x20, 0x8e, 0x00, 0x30, 0x55, 0xa6, 0xfb, 0x6b, 0x7b, 0x2b, 0xf2,
	0xf7, 0x31, 0x65, 0xba, 0x43, 0xac, 0xcc, 0xcb, 0xcd, 0xd2, 0xb4, 0x3f, 0xe7, 0xfa, 0x87, 0xa8,
	0x13, 0x1a, 0x18, 0x43, 0xf3, 0x93, 0x2e, 0x57, 0xef, 0x02, 0x0f, 0x2e, 0xfe, 0xc7, 0xa8, 0x7a,
	0x57, 0x76, 0x29, 0x78, 0xd5, 0x65, 0x37, 0xfe, 0x55, 0x0b, 0xfe, 0xa7, 0xa8, 0xec, 0xc6, 0x3d,
	0x62, 0x49, 0xae, 0x36, 0x5f, 0x86, 0x99, 0xf7, 0xcf, 0x81, 0x99, 0x77, 0xb4, 0x0e, 0xe4, 0x3e,
	0x33, 0x6b, 0x8d, 0x26, 0xfe, 0x97, 0xa8, 0x7c, 0xbb, 0x19, 0x46, 0x9f, 0xe3, 0xfa, 0x8d, 0xc0,
	0x9c, 0xf5, 0xff, 0x6b, 0x54, 0x8e, 0xeb, 0x10, 0x73, 0xca, 0xef, 0x54, 0xcc, 0x34, 0x70, 0x7f,
	0xc7, 0xff, 0x16, 0xa5, 0x02, 0x88, 0x23, 0x92, 0xeb, 0xb6, 0x3a, 0xf2, 0x3f, 0xef, 0xf1, 0x42,
	0xff, 0x1e, 0x75, 0x82, 0xe4, 0x28, 0xaf, 0xe5, 0x9e, 0x32, 0xc1, 0x1a, 0xb2, 0xe7, 0x9f, 0xed,
	0x55, 0x64, 0x67, 0xc8, 0x7f, 0x74, 0x62, 0xde, 0x1a, 0xe5, 0x64, 0x6c, 0xcc, 0x9b, 0x85, 0x64,
	0x27, 0x8c, 0x0b, 0xe7, 0xf5, 0x1f, 0x6c, 0x86, 0xce, 0x14, 0xfe, 0xcf, 0xb8, 0x95, 0xe4, 0x39,
	0x87, 0xf9, 0x49, 0xa4, 0xe5, 0x5a, 0x45, 0xd6, 0xc8, 0x04, 0xff, 0x57, 0xd4, 0x81, 0x87, 0x96,
	0x6b, 0x60, 0x5d, 0x4f, 0x05, 0x2a, 0x6b, 0xb7, 0xfd, 0x77, 0xdc, 0x54, 0xa0, 0xd2, 0xbb, 0xec,
	0x15, 0xb7, 0x84, 0x6a, 0x07, 0xfd, 0x4f, 0xd4, 0x52, 0x6e, 0x5c, 0xe2, 0x52, 0xea, 0xc6, 0xe7,
	0xbe, 0x29, 0xff, 0x1b, 0x95, 0xba, 0x7a, 0x4f, 0xfb, 0xf6, 0xf4, 0x6c, 0x64, 0xf0, 0x53, 0xd3,
	0x46, 0x86, 0xff, 0x0b, 0xb6, 0xe9, 0x54, 0x33, 0x37, 0xa7, 0x22, 0x8c, 0x3d, 0x27, 0xf0, 0x2f,
	0xcc, 0xff, 0x3f, 0x26, 0xc2, 0x58, 0xc4, 0x12, 0xdd, 0x0f, 0x75, 0xd0, 0x33, 0xb7, 0x77, 0xee,
	0x39, 0xe0, 0xde, 0xce, 0x9d, 0x8d, 0xad, 0x7d, 0xbf, 0x82, 0xed, 0x9e, 0x6e, 0xfd, 0x94, 0xb5,
	0xb8, 0xbf, 0xb3, 0xbb, 0x53, 0x74, 0xd6, 0xf3, 0xbb, 0x9b, 0xbb, 0x5b, 0x37, 0x6f, 0xcd, 0xdd,
	0xdb, 0xb9, 0xb5, 0xb9, 0xb5, 0xf1, 0xfc, 0xe6, 0xf6, 0xee, 0xfd, 0x9b, 0x73, 0xb7, 0x77, 0xee,
	0xcd, 0xdf, 0xde, 0xda, 0x79, 0x78, 0xe7, 0xf9, 0xed, 0x8d, 0x37, 0x77, 0xe7, 0x1f, 0xdc, 0x7e,
	0xdf, 0xc6, 0xbd, 0x9b, 0xf3, 0xb7, 0x77, 0xee, 0xbd, 0xb1, 0xb9, 0xb5, 0x71, 0x67, 0xfe, 0xee,
	0xce, 0x7c, 0xf3, 0x7b, 0xda, 0x07, 0xed, 0x9f, 0xe4, 0x7e, 0xb8, 0xd3, 0xb9, 0xf5, 0x88, 0xf9,
	0xe9, 0xec, 0xd2, 0x47, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x84, 0x2b, 0x30, 0xb6, 0x3b, 0x00,
	0x00,
}

// Code generated by protoc-gen-go.
// source: munic/type/event.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import munic_internals_type "gitlab.mobile-intra.com/cloud-next/schema/compiled/go/munic/internals/types/eventmetadata"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An Event is an immutable object in the cloud.
// It represents the header (Metadata) of our events.
type Event struct {
	// Represents a unique event ID.
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// A thread is a sequence of events,
	// each event being a result of process of the previous one (request-response, enrichement).
	// Such events in a sequence will have the same thread id.
	ThreadId uint64 `protobuf:"varint,2,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	// Represents the entity that created and sent the first event of this thread of events
	ThreadRoot *Entity `protobuf:"bytes,3,opt,name=thread_root,json=threadRoot" json:"thread_root,omitempty"`
	// Generally, an event have only one parent event (for example when we produce with the API).
	// An event can have more than one parent when we merge two events together after
	// compositing two agents (not implemented for now)
	ParentIds []uint64 `protobuf:"varint,4,rep,packed,name=parent_ids,json=parentIds" json:"parent_ids,omitempty"`
	// Represents the entity that created and sent this event
	Sender *Entity `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	// Represents the entities that will receive the event.
	// If the list is empty the recipients are not known.
	Recipients []*Entity `protobuf:"bytes,6,rep,name=recipients" json:"recipients,omitempty"`
	// GroupKey serves as the key when partitioning the event stream into substreams (such as kafka partitions)
	// as well as for managing state. Indeed, two events having the same group_id have access
	// to the same state. For now, the only group key is the related asset (which is a structure containing the
	// asset and the account). For now, The GroupKey will also be used to know to which account (or asset) this event
	// is related. Thus, we only support asset in groupKey for instance.
	GroupKey *GroupKey `protobuf:"bytes,7,opt,name=group_key,json=groupKey" json:"group_key,omitempty"`
	// connection_id of the related Asset. Mainly accessed by the Binary Server.
	// This field is only set when the event comes from an asset from outside our cloud.
	ConnectionId uint64 `protobuf:"varint,8,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	// A timestamp indicating when the event's fields' information were recorded.
	EventTime *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	// A timestamp indicating when the event was ingested by our platform.
	// This should only be set when the event comes from an entity from outside our
	// platform.
	// For now, it's only set if the event is received by the Binary Server,
	// the entry point of Cloud Connect.
	IngestTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=ingest_time,json=ingestTime" json:"ingest_time,omitempty"`
	// content represent the body of the event.
	// For instance, we distinguish three types of events (as specialisation)
	//
	// Types that are valid to be assigned to Content:
	//	*Event_Track
	//	*Event_ConnStateChange
	//	*Event_Message
	//	*Event_Ack
	Content isEvent_Content `protobuf_oneof:"content"`
	// tags are used for specifying offers.
	Tags map[string]string `protobuf:"bytes,15,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Private metadata of an event for internal use only.
	// Change may happen at anytime without notice.
	Internal *munic_internals_type.EventMetadata `protobuf:"bytes,16,opt,name=internal" json:"internal,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isEvent_Content interface {
	isEvent_Content()
}

type Event_Track struct {
	Track *Track `protobuf:"bytes,11,opt,name=track,oneof"`
}
type Event_ConnStateChange struct {
	ConnStateChange *ConnStateChange `protobuf:"bytes,12,opt,name=connStateChange,oneof"`
}
type Event_Message struct {
	Message *Message `protobuf:"bytes,13,opt,name=message,oneof"`
}
type Event_Ack struct {
	Ack *Ack `protobuf:"bytes,14,opt,name=ack,oneof"`
}

func (*Event_Track) isEvent_Content()           {}
func (*Event_ConnStateChange) isEvent_Content() {}
func (*Event_Message) isEvent_Content()         {}
func (*Event_Ack) isEvent_Content()             {}

func (m *Event) GetContent() isEvent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Event) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *Event) GetThreadRoot() *Entity {
	if m != nil {
		return m.ThreadRoot
	}
	return nil
}

func (m *Event) GetParentIds() []uint64 {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

func (m *Event) GetSender() *Entity {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Event) GetRecipients() []*Entity {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *Event) GetGroupKey() *GroupKey {
	if m != nil {
		return m.GroupKey
	}
	return nil
}

func (m *Event) GetConnectionId() uint64 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

func (m *Event) GetEventTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EventTime
	}
	return nil
}

func (m *Event) GetIngestTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.IngestTime
	}
	return nil
}

func (m *Event) GetTrack() *Track {
	if x, ok := m.GetContent().(*Event_Track); ok {
		return x.Track
	}
	return nil
}

func (m *Event) GetConnStateChange() *ConnStateChange {
	if x, ok := m.GetContent().(*Event_ConnStateChange); ok {
		return x.ConnStateChange
	}
	return nil
}

func (m *Event) GetMessage() *Message {
	if x, ok := m.GetContent().(*Event_Message); ok {
		return x.Message
	}
	return nil
}

func (m *Event) GetAck() *Ack {
	if x, ok := m.GetContent().(*Event_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *Event) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Event) GetInternal() *munic_internals_type.EventMetadata {
	if m != nil {
		return m.Internal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Track)(nil),
		(*Event_ConnStateChange)(nil),
		(*Event_Message)(nil),
		(*Event_Ack)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// content
	switch x := m.Content.(type) {
	case *Event_Track:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Track); err != nil {
			return err
		}
	case *Event_ConnStateChange:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnStateChange); err != nil {
			return err
		}
	case *Event_Message:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *Event_Ack:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Content has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 11: // content.track
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Track)
		err := b.DecodeMessage(msg)
		m.Content = &Event_Track{msg}
		return true, err
	case 12: // content.connStateChange
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnStateChange)
		err := b.DecodeMessage(msg)
		m.Content = &Event_ConnStateChange{msg}
		return true, err
	case 13: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Content = &Event_Message{msg}
		return true, err
	case 14: // content.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ack)
		err := b.DecodeMessage(msg)
		m.Content = &Event_Ack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// content
	switch x := m.Content.(type) {
	case *Event_Track:
		s := proto.Size(x.Track)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ConnStateChange:
		s := proto.Size(x.ConnStateChange)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GroupKey serves as the key when partitioning the event stream into substreams (such as kafka partitions)
// as well as for managing state. Indeed, two events having the same group_id have access
// to the same state. For now, the only group key is the related asset (which is a structure containing the
// asset and the account). For now, The GroupKey will also be used to know to which account (or asset) this event
// is related. Thus, we only support asset in groupKey for instance.
type GroupKey struct {
	// Types that are valid to be assigned to Key:
	//	*GroupKey_Asset
	Key isGroupKey_Key `protobuf_oneof:"key"`
}

func (m *GroupKey) Reset()                    { *m = GroupKey{} }
func (m *GroupKey) String() string            { return proto.CompactTextString(m) }
func (*GroupKey) ProtoMessage()               {}
func (*GroupKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isGroupKey_Key interface {
	isGroupKey_Key()
}

type GroupKey_Asset struct {
	Asset *Asset `protobuf:"bytes,1,opt,name=asset,oneof"`
}

func (*GroupKey_Asset) isGroupKey_Key() {}

func (m *GroupKey) GetKey() isGroupKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GroupKey) GetAsset() *Asset {
	if x, ok := m.GetKey().(*GroupKey_Asset); ok {
		return x.Asset
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GroupKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GroupKey_OneofMarshaler, _GroupKey_OneofUnmarshaler, _GroupKey_OneofSizer, []interface{}{
		(*GroupKey_Asset)(nil),
	}
}

func _GroupKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GroupKey)
	// key
	switch x := m.Key.(type) {
	case *GroupKey_Asset:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Asset); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GroupKey.Key has unexpected type %T", x)
	}
	return nil
}

func _GroupKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GroupKey)
	switch tag {
	case 1: // key.asset
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Asset)
		err := b.DecodeMessage(msg)
		m.Key = &GroupKey_Asset{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GroupKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GroupKey)
	// key
	switch x := m.Key.(type) {
	case *GroupKey_Asset:
		s := proto.Size(x.Asset)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Event)(nil), "munic.type.Event")
	proto.RegisterType((*GroupKey)(nil), "munic.type.GroupKey")
}

func init() { proto.RegisterFile("munic/type/event.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4b, 0x6b, 0xdb, 0x4a,
	0x14, 0x8e, 0x9f, 0xb1, 0x8e, 0xf3, 0xba, 0x73, 0xcd, 0xbd, 0x83, 0x43, 0xa9, 0x49, 0x36, 0x6e,
	0x21, 0x12, 0x4d, 0x16, 0x7d, 0x42, 0x89, 0x43, 0x48, 0x42, 0x09, 0x04, 0x35, 0xab, 0x6e, 0xcc,
	0x58, 0x3a, 0x55, 0xa6, 0x91, 0x66, 0x84, 0x66, 0x1c, 0xea, 0x7f, 0xd3, 0x9f, 0xd1, 0x9f, 0x57,
	0xe6, 0x48, 0xb6, 0x95, 0x40, 0xe8, 0x4e, 0xf3, 0xbd, 0xe6, 0x71, 0x3e, 0x04, 0xff, 0x65, 0x73,
	0x25, 0xa3, 0xc0, 0x2e, 0x72, 0x0c, 0xf0, 0x01, 0x95, 0xf5, 0xf3, 0x42, 0x5b, 0xcd, 0x80, 0x70,
	0xdf, 0xe1, 0xc3, 0x97, 0x89, 0xd6, 0x49, 0x8a, 0x01, 0x31, 0xb3, 0xf9, 0xf7, 0xc0, 0xca, 0x0c,
	0x8d, 0x15, 0x59, 0x5e, 0x8a, 0x87, 0xff, 0xd7, 0x43, 0x94, 0x95, 0x76, 0x51, 0x11, 0xf5, 0x74,
	0x5b, 0x88, 0xe8, 0xbe, 0xc2, 0x47, 0x35, 0x3c, 0xd2, 0x4a, 0x7d, 0xb5, 0xc2, 0xe2, 0xd9, 0x9d,
	0x50, 0x09, 0x56, 0x0a, 0x5e, 0x53, 0x64, 0x68, 0x8c, 0x58, 0x31, 0x83, 0x1a, 0xb3, 0x4e, 0x1c,
	0x97, 0xa8, 0x54, 0x16, 0x0b, 0x25, 0x52, 0x53, 0xbb, 0xd1, 0x35, 0x5a, 0x11, 0x0b, 0x2b, 0x4a,
	0xe5, 0xc1, 0xef, 0x2e, 0x74, 0xce, 0x1d, 0xce, 0x76, 0xa0, 0x29, 0x63, 0xde, 0x18, 0x35, 0xc6,
	0xed, 0xb0, 0x29, 0x63, 0xb6, 0x0f, 0x9e, 0xbd, 0x2b, 0x50, 0xc4, 0x53, 0x19, 0xf3, 0x26, 0xc1,
	0xbd, 0x12, 0xb8, 0x8a, 0xd9, 0x09, 0xf4, 0x2b, 0xb2, 0xd0, 0xda, 0xf2, 0xd6, 0xa8, 0x31, 0xee,
	0x1f, 0x33, 0x7f, 0xfd, 0x4c, 0xfe, 0x39, 0xdd, 0x3c, 0x84, 0x52, 0x16, 0x6a, 0x6d, 0xd9, 0x0b,
	0x80, 0x5c, 0x14, 0xa8, 0xec, 0x54, 0xc6, 0x86, 0xb7, 0x47, 0xad, 0x71, 0x3b, 0xf4, 0x4a, 0xe4,
	0x2a, 0x36, 0xec, 0x35, 0x74, 0x0d, 0xaa, 0x18, 0x0b, 0xde, 0x79, 0x36, 0xae, 0x52, 0xb0, 0x63,
	0x80, 0x02, 0x23, 0x99, 0x4b, 0x54, 0xd6, 0xf0, 0xee, 0xa8, 0xf5, 0xdc, 0xf6, 0x6b, 0x15, 0x7b,
	0x03, 0x5e, 0x52, 0xe8, 0x79, 0x3e, 0xbd, 0xc7, 0x05, 0xdf, 0xa4, 0x2d, 0x06, 0x75, 0xcb, 0x85,
	0x23, 0xbf, 0xe0, 0x22, 0xec, 0x25, 0xd5, 0x17, 0x3b, 0x84, 0x6d, 0x37, 0x10, 0x8c, 0xac, 0xd4,
	0xca, 0xbd, 0x43, 0x8f, 0xde, 0x61, 0x6b, 0x0d, 0x5e, 0xc5, 0xec, 0x3d, 0x00, 0xbd, 0xec, 0xd4,
	0x15, 0x81, 0x7b, 0x14, 0x3c, 0xf4, 0xcb, 0x96, 0xf8, 0xcb, 0x96, 0xf8, 0xb7, 0xcb, 0x96, 0x84,
	0x1e, 0xa9, 0xdd, 0x9a, 0x7d, 0x84, 0xbe, 0x54, 0x09, 0x9a, 0xca, 0x0b, 0x7f, 0xf5, 0x42, 0x29,
	0x27, 0xf3, 0x2b, 0xe8, 0x50, 0x8b, 0x78, 0x9f, 0x6c, 0xff, 0xd4, 0xef, 0x72, 0xeb, 0x88, 0xcb,
	0x8d, 0xb0, 0x54, 0xb0, 0x0b, 0xd8, 0x7d, 0x52, 0x2c, 0xbe, 0x45, 0xa6, 0xfd, 0xba, 0xe9, 0xec,
	0xb1, 0xe4, 0x72, 0x23, 0x7c, 0xea, 0x62, 0x01, 0x6c, 0x56, 0xfd, 0xe3, 0xdb, 0x14, 0xf0, 0x6f,
	0x3d, 0xe0, 0xba, 0xa4, 0x2e, 0x37, 0xc2, 0xa5, 0x8a, 0x1d, 0x42, 0xcb, 0x1d, 0x71, 0x87, 0xc4,
	0xbb, 0x75, 0xf1, 0x29, 0x1d, 0xd0, 0xb1, 0x2c, 0x80, 0xb6, 0x15, 0x89, 0xe1, 0xbb, 0x34, 0xc7,
	0x47, 0x67, 0xa2, 0x6e, 0xfa, 0xb7, 0x22, 0x31, 0xe7, 0xca, 0x16, 0x8b, 0x90, 0x84, 0xec, 0x33,
	0xf4, 0x96, 0xdd, 0xe6, 0x7b, 0x14, 0x7d, 0x58, 0x99, 0x56, 0x95, 0xaf, 0xd9, 0x97, 0x95, 0x0f,
	0x57, 0xa6, 0xe1, 0x5b, 0xf0, 0x56, 0x99, 0x6c, 0x0f, 0x5a, 0xae, 0x12, 0xae, 0xfa, 0x5e, 0xe8,
	0x3e, 0xd9, 0x00, 0x3a, 0x0f, 0x22, 0x9d, 0x23, 0xf5, 0xde, 0x0b, 0xcb, 0xc5, 0x87, 0xe6, 0xbb,
	0xc6, 0xc4, 0x83, 0xcd, 0x48, 0x2b, 0x8b, 0xca, 0x1e, 0x7c, 0x82, 0xde, 0xb2, 0x32, 0x6e, 0x16,
	0xc2, 0x18, 0xb4, 0x14, 0xf2, 0x64, 0x16, 0xa7, 0x8e, 0x70, 0xb3, 0x20, 0xc5, 0xa4, 0x43, 0xbb,
	0x4d, 0x7e, 0xc0, 0x20, 0xd2, 0x59, 0xa5, 0xcb, 0x74, 0x8c, 0x29, 0xa9, 0x27, 0x40, 0x47, 0xbe,
	0x71, 0xa3, 0xbf, 0x69, 0x7c, 0x3b, 0x4d, 0xa4, 0x4d, 0xc5, 0xcc, 0xcf, 0xf4, 0x4c, 0xa6, 0x78,
	0x24, 0x95, 0x2d, 0x84, 0x1f, 0xe9, 0x2c, 0x88, 0x52, 0x3d, 0x8f, 0x8f, 0x14, 0xfe, 0xb4, 0x81,
	0x89, 0xee, 0x30, 0x13, 0x41, 0xa4, 0xb3, 0x5c, 0xa6, 0x18, 0x07, 0x89, 0x0e, 0xd6, 0x3f, 0x05,
	0xf3, 0xab, 0xd1, 0x98, 0x75, 0xa9, 0x49, 0x27, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x77, 0x95,
	0xe1, 0x3f, 0xdf, 0x04, 0x00, 0x00,
}

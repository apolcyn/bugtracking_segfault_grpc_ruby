// Code generated by protoc-gen-go.
// source: munic/grpc/agent.proto
// DO NOT EDIT!

/*
Package agent is a generated protocol buffer package.

It is generated from these files:
	munic/grpc/agent.proto

It has these top-level messages:
	ProcessRequest
	ProcessResponse
	State
*/
package agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import munic_type5 "gitlab.mobile-intra.com/cloud-next/schema/compiled/go/munic/types"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProcessRequest struct {
	Key        *munic_type5.GroupKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	IsDeadline bool                  `protobuf:"varint,2,opt,name=is_deadline,json=isDeadline" json:"is_deadline,omitempty"`
	State      *State                `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Events     []*munic_type5.Event  `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
}

func (m *ProcessRequest) Reset()                    { *m = ProcessRequest{} }
func (m *ProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessRequest) ProtoMessage()               {}
func (*ProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProcessRequest) GetKey() *munic_type5.GroupKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ProcessRequest) GetIsDeadline() bool {
	if m != nil {
		return m.IsDeadline
	}
	return false
}

func (m *ProcessRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ProcessRequest) GetEvents() []*munic_type5.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type ProcessResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *ProcessResponse) Reset()                    { *m = ProcessResponse{} }
func (m *ProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessResponse) ProtoMessage()               {}
func (*ProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProcessResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type State struct {
	Bytes    []byte                     `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Deadline *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=deadline" json:"deadline,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *State) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *State) GetDeadline() *google_protobuf.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func init() {
	proto.RegisterType((*ProcessRequest)(nil), "munic.grpc.ProcessRequest")
	proto.RegisterType((*ProcessResponse)(nil), "munic.grpc.ProcessResponse")
	proto.RegisterType((*State)(nil), "munic.grpc.State")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProcessService service

type ProcessServiceClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type processServiceClient struct {
	cc *grpc.ClientConn
}

func NewProcessServiceClient(cc *grpc.ClientConn) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/munic.grpc.ProcessService/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProcessService service

type ProcessServiceServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
}

func RegisterProcessServiceServer(s *grpc.Server, srv ProcessServiceServer) {
	s.RegisterService(&_ProcessService_serviceDesc, srv)
}

func _ProcessService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/munic.grpc.ProcessService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "munic.grpc.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ProcessService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "munic/grpc/agent.proto",
}

func init() { proto.RegisterFile("munic/grpc/agent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x65, 0x4a, 0x4b, 0xe5, 0x22, 0x10, 0x56, 0x85, 0xa2, 0x30, 0xb4, 0xea, 0x00, 0x65,
	0xa8, 0x2d, 0x15, 0x89, 0x81, 0x8d, 0x8a, 0x3f, 0x03, 0x4b, 0x95, 0x96, 0x85, 0x05, 0x25, 0xce,
	0x11, 0x2c, 0xe2, 0x38, 0xc4, 0x4e, 0x45, 0xde, 0x86, 0x17, 0xe0, 0x1d, 0x51, 0x9c, 0x34, 0xb4,
	0x08, 0x31, 0xde, 0xdd, 0xcf, 0xfe, 0xbe, 0xfb, 0x74, 0xf8, 0x58, 0xe6, 0x89, 0xe0, 0x2c, 0xca,
	0x52, 0xce, 0xfc, 0x08, 0x12, 0x43, 0xd3, 0x4c, 0x19, 0x45, 0xb0, 0xed, 0xd3, 0xb2, 0xef, 0xd6,
	0x8c, 0x29, 0x52, 0x60, 0xb0, 0x6a, 0x18, 0x77, 0x10, 0x29, 0x15, 0xc5, 0xc0, 0x6c, 0x15, 0xe4,
	0x2f, 0xcc, 0x08, 0x09, 0xda, 0xf8, 0x32, 0xad, 0x80, 0xd1, 0x17, 0xc2, 0x07, 0xf3, 0x4c, 0x71,
	0xd0, 0xda, 0x83, 0xf7, 0x1c, 0xb4, 0x21, 0xa7, 0xb8, 0xf5, 0x06, 0x85, 0x83, 0x86, 0x68, 0xdc,
	0x9b, 0xf6, 0x69, 0xa5, 0x52, 0xfe, 0x4c, 0xef, 0x33, 0x95, 0xa7, 0x0f, 0x50, 0x78, 0x25, 0x40,
	0x06, 0xb8, 0x27, 0xf4, 0x73, 0x08, 0x7e, 0x18, 0x8b, 0x04, 0x9c, 0x9d, 0x21, 0x1a, 0x77, 0x3d,
	0x2c, 0xf4, 0x4d, 0xdd, 0x21, 0x67, 0xb8, 0xad, 0x8d, 0x6f, 0xc0, 0x69, 0xd9, 0xaf, 0x8e, 0xe8,
	0x8f, 0x61, 0xba, 0x28, 0x07, 0x5e, 0x35, 0x27, 0xe7, 0xb8, 0x63, 0x4d, 0x6b, 0x67, 0x77, 0xd8,
	0xda, 0x20, 0xad, 0xe8, 0x6d, 0x39, 0xf1, 0x6a, 0x60, 0x74, 0x85, 0x0f, 0x1b, 0xbb, 0x3a, 0x55,
	0x89, 0xde, 0x90, 0x41, 0xff, 0xcb, 0x8c, 0x1e, 0x71, 0xdb, 0xd6, 0xa4, 0x8f, 0xdb, 0x41, 0x61,
	0x40, 0xdb, 0x17, 0xfb, 0x5e, 0x55, 0x90, 0x4b, 0xdc, 0xdd, 0x5a, 0xa6, 0x37, 0x75, 0x69, 0x15,
	0x1f, 0x5d, 0xc7, 0x47, 0x97, 0xeb, 0xf8, 0xbc, 0x86, 0x9d, 0x2e, 0x9b, 0x04, 0x17, 0x90, 0xad,
	0x04, 0x07, 0x32, 0xc3, 0x7b, 0x75, 0x87, 0xb8, 0x9b, 0x6e, 0xb6, 0x83, 0x76, 0x4f, 0xfe, 0x9c,
	0x55, 0x5b, 0xcd, 0x14, 0xee, 0x73, 0x25, 0x6b, 0x42, 0xaa, 0x10, 0x62, 0xcb, 0xcd, 0xf0, 0x75,
	0x79, 0x02, 0xf3, 0xd2, 0xd0, 0x1c, 0x3d, 0xdd, 0x45, 0xc2, 0xc4, 0x7e, 0x40, 0xa5, 0x0a, 0x44,
	0x0c, 0x13, 0x91, 0x98, 0xcc, 0xa7, 0x5c, 0x49, 0xc6, 0x63, 0x95, 0x87, 0x93, 0x04, 0x3e, 0x0c,
	0xd3, 0xfc, 0x15, 0xa4, 0xcf, 0xb8, 0x92, 0xa9, 0x88, 0x21, 0x64, 0x91, 0x62, 0xbf, 0x2f, 0xea,
	0x13, 0xa1, 0xa0, 0x63, 0x97, 0xbc, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xb9, 0x93, 0x0d,
	0x6f, 0x02, 0x00, 0x00,
}
